Readme file:  all runs before 9/1

Results of the runs of the test.# files in the dugout directory
run on the C++ code

the runs of the same files using the older mma version of Mora
is in the dynamo directory.


-------
problems found so far.  I quit after each test case and
reloaded everything for each run.

1. so far it doesn't like to be run more than once
per mathematica session.
I ran test.2  once and got an answer.
Then I quit and reran with test.3 and then test.2
Problem:  test.2 didn't get the same answer as the previous
time is was run.  In fact, whatever set you give Mora it
runs the first problem it got during the session.
It appears that the first run is calculated correctly, when
I compare answers with the same files run on regular Mora.

2.  another problem I noticed is that the
Put command is somehow affected.  if I have an answer i want to
put into a file, like the following
{ - f + b ** c,  - e + a ** f ** d}
it winds up in the file looking like
{^R - f + b ** c, ^W - e + a ** f ** d}

3.  test.8 reveals that an output was given back to the user
like:
{ - g + a ** b ** c ** d,  - g ** e + a ** a ** b, Null}
                                                   ^^^^^

4. test.10 reveals more problems

{-1 +  + d ** e, -1 +  + e ** d,  - b ** b + a ** a ** a, $Failed, 
   Null, 5 + 6 b ** b ** b ** k - a ** a ** h ** g ** d}
Error message from mma:

ToExpression::esntx: 
   Could not parse &-1 h ** g ** d + 1 a ** b ** j ** k as Mathematica input.
-1: Command not found.

right before the data was output


5.  test.11 revealed the following about the output:

Finished calculating the basis.
Partial Basis:
{
b -> 0,
c -> 0,
a**a->0 -> 0     (* two arrows!!*)
}
In[2]:= ans
Out[2]= {b 1, c 1, a ** a -> 0}  (* should be b ->0,c->0*)
        ^^^   ^^^


6.  test.12  same type of problem as test.11:

Finished calculating the basis.
Partial Basis:
{
b -> 0,
a ** a -> 0,
c -> 0
}
In[2]:= ans
Out[2]= {b 1, a ** a, c 1}



7.    test.19  Mora doesn't do anything with e -> 0.  All the
rules should be zero

{ - e + a ** b ** c ** d,  
- e + b ** c ** d ** a, 
- e + c ** d ** a ** b,  
- e + d ** a ** b ** c, 

e -> 0, 

- a ** e + e ** a,  
- d ** e + e ** d,  
- b ** e + e ** b, 
- c ** e + e ** c}


8.  test.20
this is not the answer given, but this is what 
appears after Partial Basis.  Looks like something
we saw earlier  (rerun if problem from before is fixed?)

{
a**ia->1 -> 0,
b**ib->1 -> 0,
c**ic->1 -> 0,
d**id->1 -> 0,
ia**a->1 -> 0,
ib**b->1 -> 0,
ic**c->1 -> 0,
id**d->1 -> 0,
x**z->-a**c -> 0,
y**c->1-b**z -> 0,
z**y->-d**a -> 0
}

9.  test.21  didn't get the same answer as the reg. Mora run.
Also, the output is odd with the 1's.  Plus the same output probs
as in 8. above.
ditto for
test.22-25

{a ** ia -> 1, b ** ib -> 1, c ** ic -> 1, d ** id -> 1, 
ia ** a -> 1, ib ** b -> 1, ic ** c -> 1, id ** d -> 1, 
 
1 x ** z -> -a ** c, 
1 y ** c -> 1 - b ** z, 
1 z ** y -> -d ** a}
^^^

10.   test.26


-1: Command not found.

ToExpression::esntx: 
   Could not parse (-1 z + -1 d ** a ** c + 1 z ** b ** z
     as Mathematica input.
{-1 +  + c ** y + w ** a, 1 c ** b + w ** x, -1 +  + a ** w + x ** d, 
 1 a ** c + x ** z, -1 +  + b ** z + y ** c, 1 b ** d + y ** w, 
 -1 +  + d ** x + z ** b, 1 d ** a + z ** y, Null, $Failed, 
 -d ** a + d ** a ** c ** y + 61 z ** b ** d ** a, 
5 - d ** a ** c ** b ** z + z ** b ** d ** a ** c}

saw this before too
variations on the same theme  test.26-30


11.  test.31

ToExpression::esntx: 
   Could not parse (1 proj1**ACROSS**proj1->ACROSS**proj1
     as Mathematica input.


12.  test.32  There is a memory leak
out of virtual memory error message

LinkObject::linkd: LinkObject[p2c, 1, 1] is closed; the connection is dead.

LinkObject::linkx: 
   Argument LinkObject[p2c, 1, 1] in 
    LinkWrite[LinkObject[p2c, 1, 1], CallPacket[7, {}]]
     is not an open LinkObject.

Table::iterb: Iterator {j, 1, MoraAlg`Private`n$209}
     does not have appropriate bounds.

13.  test.33  (ditto test.34 basically the same file )
Output has things like  Out[0] in it.


 -1 +  + a ** Inva
 -1 + Y + Ajc ** c ** LossLessM ** InvAja - >   InvLossLessM ** a ** LossLessM ** InvAja
 + Ajb - c ** LossLessM
  -1 +  + Inva ** a
 -1 + InvLossLessM ** LossLessM + Out[0]
+ b - LossLessM ** Ajc
-1 + LossLessM ** InvLossLessM + Out[0]
  Aja - Ajc ** c ** LossLessM + F1 InvLossLessM ** a ** LossLessM
 -InvLossLessM + J + InvAja ** Ajc ** c - InvAja ** InvLossLessM ** a


14.  test.35 (last one) could not calculate the basis
same thing here.  there is a problem with running out of 
virtual memory..Bad news man!

LinkObject::linkd: LinkObject[p2c, 1, 1] is closed; the connection is dead.

LinkObject::linkx: 
   Argument LinkObject[p2c, 1, 1] in 
    LinkWrite[LinkObject[p2c, 1, 1], CallPacket[7, {}]]
     is not an open LinkObject.

Table::iterb: Iterator {j, 1, MoraAlg`Private`n$100}
     does not have appropriate bounds.


test.36 is the EB problem
Here are the mathematica error messages:

Parse error in preMonomial::fromString monomial[x**Inv[x]->1]
index is:9
The character - is not a comma.
The last child processed was x**Inv[x]
The remaining string is now ->1
***Error in file preMonomial.c on line number 211.

LinkObject::linkd: LinkObject[p2c, 1, 1] is closed; the connection is dead.

LinkObject::linkx: 
   Argument LinkObject[p2c, 1, 1] in LinkWrite[LinkObject[p2c, 1, 1], <<1>>]
     is not an open LinkObject.

LinkObject::linkx: 
   Argument LinkObject[p2c, 1, 1] in LinkWrite[LinkObject[p2c, 1, 1], <<1>>]
     is not an open LinkObject.

LinkObject::linkx: 
   Argument LinkObject[p2c, 1, 1] in LinkWrite[LinkObject[p2c, 1, 1], <<1>>]
     is not an open LinkObject.

General::stop: Further output of LinkObject::linkx
     will be suppressed during this calculation.

Table::iterb: Iterator {j, 1, MoraAlg`Private`n$85}
     does not have appropriate bounds.

In


test.36 has been changed to not have brackets in the vars.
new problems
{
dudeXY**invy->invy+x**dudeYX -> 0,
dudeXY**x->x**dudeYX -> 0,
dudeYX**invx->invx+y**dudeXY -> 0,
dudeYX**y->y**dudeXY -> 0,
invx**dudeXY->invx+y**dudeXY -> 0,
invx**x->1 -> 0,
invy**dudeYX->invy+x**dudeYX -> 0,
invy**y->1 -> 0,
x**invx->1 -> 0,
y**invy->1 -> 0,
dudeXY**x**y->-1+dudeXY -> 0,
dudeYX**y**x->-1+dudeYX -> 0,
x**y**dudeXY->-1+dudeXY -> 0,
y**x**dudeYX->-1+dudeYX -> 0
}
 
invy+x**dudeYX: No match.
invx+y**dudeXY: No match.
invx+y**dudeXY: No match.
invy+x**dudeYX: No match.
