RRBC[] := 
Module[{hist,fullhist,kpoly},
  fullhist = WhatIsHistory[WhatAreNumbers[],UseMarker->True];
  Return[Union[RetrieveMarker[RRBC[fullhist]]]];
];

debugRRCB = True;

RRBC[historyMark_Global`GBMarker] := 
Module[{catTuples,knownsTuple,knownCategory,singleRuleCategory,
        fc,ints,mark,
        ans1,ans2,combinedMarker,i,digPlusCat,cat,result},
  fc = SaveFactControl[];
  Print["fc:",fc];
  ints = WhatAreGBNumbersMarker[fc];
  Print["ints:",ints];
  mark = CPPCreateCategories[ints,fc];
  Print["mark:",mark];
  CreateCategories[mark,junk3];
  catTuples = Global`RetrieveCategoryMarkers[mark];
Print["catTuples:",catTuples];
  (* Get the knowns *)
  knownsTuple = Select[catTuples,(#[[2]]==={})&];
  If[Length[knownsTuple]===0
     , knownCategory = CreateMarker["rules"]; (* empty *)
     , knownCategory = knownsTuple[[1,3]];
  ];
  singleRuleCategory = Global`SingleRules[mark]; (* a GBMarker *)
  combinedMarker = CopyMarker[knownCategory,"rules"];
  AppendMarker[combinedMarker,singleRuleCategory];
  Print["About to do ",Length[catTuples],
        " iterations in RRBC."];
  result = internalMarkerRuleRemoveRedundent[combinedMarker,historyMark];
If[debugRRCB
 , Print["Combined Marker is:"];
   PrintMarker[combinedMarker];
];
  Do[ If[i==Length[catTuples]
           , WriteString[$Output,ToString[i]];
           , WriteString[$Output,ToString[i],","];
      ];
      digPlusCat = CopyMarker[combinedMarker,"rules"];
      cat = catTuples[[i]];
      Global`AppendMarker[digPlusCat,cat[[3]]];
If[debugRRCB
 , Print["Iteration:",i];
   Print["digPlusCat Marker is:"];
   PrintMarker[digPlusCat];
   Print["Done with digPlusCat output"];
];
      remainNumbers = internalMarkerRuleRemoveRedundent[digPlusCat,historyMark];
Print["Did RR:",i];
      DestoryMarker[digPlusCat];
      (* Grab the numbers from the history and lob into result *)
      AppendTo[result,remainNumbers];
  ,{i,Length[catTuples]}];
  result = Union[Flatten[result]];
Print[result];
Print[Length[result]];
  ans1 = CopyMarker[historyMark,"rules"];
  ans2 = MarkerTake[ans1,result];
  DestroyMarker[ans1];
  Return[ans2];
];
