(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2022-03-08 05:49:53.274406                       *
 *************************************************************************)


(* NCToNCPoly *)
NCToNCPoly::usage = "\
NCToNCPoly[expr, var] constructs a noncommutative polynomial object in variables var from the nc expression expr.

For example

    NCToNCPoly[x**y - 2 y**z, {x, y, z}] 

constructs an object associated with the noncommutative polynomial xy − 2yz in variables x, y and z. The internal representation is so that the terms are sorted according to a degree-lexicographic order in vars. In the above example, x < y < z.";

(* NCPolyToNC *)
NCPolyToNC::usage = "\
NCPolyToNC[poly, vars] constructs an nc expression from the noncommutative polynomial object poly in variables vars. Monomials are specified in terms of the symbols in the list var.

For example

    poly = NCToNCPoly[x**y - 2 y**z, {x, y, z}];
    expr = NCPolyToNC[poly, {x, y, z}];

returns

    expr = x**y - 2 y**z

See also: NCPolyToNC, NCPoly.";

(* NCRuleToPoly *)
NCRuleToPoly::usage = "\
NCRuleToPoly[a -> b] converts the rule a -> b into the relation a - b.

For instance:

    NCRuleToPoly[x**y**y -> x**y - 1]

returns

    x**y**y - x**y + 1";

(* NCMonomialList *)
NCMonomialList::usage = "\
NCMonomialList[poly] gives the list of all monomials in the polynomial poly.

For example:

    vars = {x, y}
    expr = B + A y ** x ** y - 2 x
    NCMonomialList[expr, vars]

returns

    {1, x, y ** x ** y}

See also: NCCoefficientRules, NCCoefficientList, NCVariables.";

(* NCCoefficientRules *)
NCCoefficientRules::usage = "\
NCCoefficientRules[poly] gives a list of rules between all the monomials polynomial poly.

For example:

    vars = {x, y}
    expr = B + A y ** x ** y - 2 x
    NCCoefficientRules[expr, vars]

returns

    {1 -> B, x -> -2, y ** x ** y -> A}

See also: NCMonomialList, NCCoefficientRules, NCVariables.";

(* NCCoefficientList *)
NCCoefficientList::usage = "\
NCCoefficientList[poly] gives the list of all coefficients in the polynomial poly.

For example:

    vars = {x, y}
    expr = B + A y ** x ** y - 2 x
    NCCoefficientList[expr, vars]

returns

    {B, -2, A}

See also: NCMonomialList, NCCoefficientRules, NCVariables.";

(* NCCoefficientQ *)
NCCoefficientQ::usage = "\
NCCoefficientQ[expr] returns True if expr is a valid polynomial coefficient.

For example:

    SetCommutative[A]
    NCCoefficientQ[1]
    NCCoefficientQ[A]
    NCCoefficientQ[2 A]

all return True and

    SetNonCommutative[x]
    NCCoefficientQ[x]
    NCCoefficientQ[x**x]
    NCCoefficientQ[Exp[x]]

all return False.

IMPORTANT: NCCoefficientQ[expr] does not expand expr. This means that NCCoefficientQ[2 (A + 1)] will return False.

See also: NCMonomialQ, NCPolynomialQ";

(* NCMonomialQ *)
NCMonomialQ::usage = "\
NCCoefficientQ[expr] returns True if expr is an nc monomial.

For example:

    SetCommutative[A]
    NCMonomialQ[1]
    NCMonomialQ[x]
    NCMonomialQ[A x ** y]
    NCMonomialQ[2 A x ** y ** x]

all return True and

    NCMonomialQ[x + x ** y]

returns False.

IMPORTANT: NCMonomialQ[expr] does not expand expr. This means that NCMonomialQ[2 (A + 1) x**x] will return False.

See also: NCCoefficientQ, NCPolynomialQ";

(* NCPolynomialQ *)
NCPolynomialQ::usage = "\
NCPolynomialQ[expr] returns True if expr is an nc polynomial with commutative coefficients.

For example:

    NCPolynomialQ[A x ** y]

all return True and

    NCMonomialQ[x + x ** y]

returns False.

IMPORTANT: NCPolynomialQ[expr] does expand expr. This means that NCPolynomialQ[(x + y)^3] will return True.

See also: NCCoefficientQ, NCMonomialQ";
