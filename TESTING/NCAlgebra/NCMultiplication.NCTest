(* History:  Mar 2016: Multiplication test (mauricio) *)

Block[
  {k,test,i,j,x,y,z,w,exp,answer},

  SetNonCommutative[x,y,w];
  SetCommutative[z];

  (* Identities *)
  NCTest[NonCommutativeMultiply[x], Unevaluated[x]];
  NCTest[NonCommutativeMultiply[x + y], Unevaluated[x + y]];
  NCTest[NonCommutativeMultiply[inv[x]], Unevaluated[inv[x]]];
  NCTest[NonCommutativeMultiply[f[x]], Unevaluated[f[x]]];

  NCTest[NonCommutativeMultiply[x_], Unevaluated[NonCommutativeMultiply[x_]]];
  NCTest[NonCommutativeMultiply[x__], Unevaluated[NonCommutativeMultiply[x__]]];
  NCTest[NonCommutativeMultiply[x___], Unevaluated[NonCommutativeMultiply[x___]]];
  NCTest[NonCommutativeMultiply[#], Unevaluated[NonCommutativeMultiply[#]]];
  NCTest[NonCommutativeMultiply[##], Unevaluated[NonCommutativeMultiply[##]]];

  NCTest[Head[x**y], NonCommutativeMultiply];
  NCTest[x**x, Power[x, 2]];
  NCTest[List @@ (x**x**y), {Power[x, 2], y}];
  NCTest[List @@ (x**(x**y)), {Power[x, 2], y}];
  NCTest[List @@ ((x**x)**y), {Power[x, 2], y}];
  NCTest[List @@ (y**x**x**y), {y, Power[x, 2], y}];
  NCTest[List @@ ((y**x)**x**y), {y, Power[x, 2], y}];
  NCTest[List @@ (y**(x**x)**y), {y, Power[x, 2], y}];
  NCTest[List @@ (y**x**(x**y)), {y, Power[x, 2], y}];

  NCTest[z**y**x**y, z*y**x**y];
  NCTest[y**z**x**y, z*y**x**y];
  NCTest[y**x**z**y, z*y**x**y];
  NCTest[y**x**y**z, z*y**x**y];

  NCTest[(z*y)**x**y, z*y**x**y];
  NCTest[y**(z*x)**y, z*y**x**y];
  NCTest[y**x**(z*y), z*y**x**y];

  NCTest[NonCommutativeMultiply[x], x];
  NCTest[NonCommutativeMultiply[y], y];
  NCTest[NonCommutativeMultiply[z], z];

  NCTest[NonCommutativeMultiply[], 1];

  NCTest[Head[x^2], Power];
  NCTest[Head[NonCommutativeMultiply[x^2]], Power];
  NCTest[List @@ NonCommutativeMultiply[x^2**y], {Power[x, 2], y}];
  NCTest[List @@ NonCommutativeMultiply[y**x^2], {y, Power[x, 2]}];
  NCTest[List @@ NonCommutativeMultiply[y**x^2**y], {y, Power[x, 2], y}];

  NCTest[NonCommutativeMultiply[x^-2], Power[x, -2]];
  NCTest[List @@ NonCommutativeMultiply[(x^-2)**y], {Power[x, -2], y}];
  NCTest[List @@ NonCommutativeMultiply[y**(x^-2)], {y, Power[x, -2]}];
  NCTest[List @@ NonCommutativeMultiply[y**(x^-2)**y], {y, Power[x, -2], y}];

  NCTest[Head[x^-1], Power];
  NCTest[Head[NonCommutativeMultiply[x^-1]], Power];

  NCTest[Head[x^-3], Power];
  NCTest[List @@ (x^2+x-x^0+x^-1), {-1, Power[x, -1], x, Power[x, 2]}];
  NCTest[(x^0)**(x^1)**(x^2)**(Power[x,-3]), 1];

  NCTest[List @@ (y**x^2), {y, Power[x,2]}];
  NCTest[List @@ (x^2**y), {Power[x, 2], y}];
  NCTest[List @@ (y**x^2**y), {y, Power[x, 2], y}];

  NCTest[y**x^2**z^3**y, z^3*y**Power[x, 2]**y];
  NCTest[y**x^2**z**z**z**y, z^3*y**Power[x, 2]**y];

  NCTest[x**Sqrt[2]**x, Sqrt[2] Power[x, 2]];
  NCTest[x**Pi**x, Pi Power[x, 2]];

  (* Subscript *)

  (* Identities *)
  NCTest[NonCommutativeMultiply[Subscript[x,1]], Unevaluated[Subscript[x,1]]];
  NCTest[NonCommutativeMultiply[Subscript[x,1] + y], Unevaluated[Subscript[x,1] + y]];
  NCTest[NonCommutativeMultiply[inv[Subscript[x,1]]], Unevaluated[inv[Subscript[x,1]]]];
  NCTest[NonCommutativeMultiply[f[Subscript[x,1]]], Unevaluated[f[Subscript[x,1]]]];

  NCTest[NonCommutativeMultiply[Subscript[x,1]_], Unevaluated[NonCommutativeMultiply[Subscript[x,1]_]]];
  NCTest[NonCommutativeMultiply[Subscript[x,1]__], Unevaluated[NonCommutativeMultiply[Subscript[x,1]__]]];
  NCTest[NonCommutativeMultiply[Subscript[x,1]___], Unevaluated[NonCommutativeMultiply[Subscript[x,1]___]]];
  NCTest[NonCommutativeMultiply[#], Unevaluated[NonCommutativeMultiply[#]]];
  NCTest[NonCommutativeMultiply[##], Unevaluated[NonCommutativeMultiply[##]]];

  NCTest[Subscript[x,1]**Subscript[x,1], Unevaluated[Subscript[x,1]**Subscript[x,1]]];
  NCTest[Subscript[x,1]**Subscript[x,1]**y, Unevaluated[Subscript[x,1]**Subscript[x,1]**y]];
  NCTest[Subscript[x,1]**(Subscript[x,1]**y), Unevaluated[Subscript[x,1]**Subscript[x,1]**y]];
  NCTest[(Subscript[x,1]**Subscript[x,1])**y, Unevaluated[Subscript[x,1]**Subscript[x,1]**y]];
  NCTest[y**Subscript[x,1]**Subscript[x,1]**y, Unevaluated[y**Subscript[x,1]**Subscript[x,1]**y]];
  NCTest[(y**Subscript[x,1])**Subscript[x,1]**y, Unevaluated[y**Subscript[x,1]**Subscript[x,1]**y]];
  NCTest[y**(Subscript[x,1]**Subscript[x,1])**y, Unevaluated[y**Subscript[x,1]**Subscript[x,1]**y]];
  NCTest[y**Subscript[x,1]**(Subscript[x,1]**y), Unevaluated[y**Subscript[x,1]**Subscript[x,1]**y]];

  NCTest[z**y**Subscript[x,1]**y, Unevaluated[z*y**Subscript[x,1]**y]];
  NCTest[y**z**Subscript[x,1]**y, Unevaluated[z*y**Subscript[x,1]**y]];
  NCTest[y**Subscript[x,1]**z**y, Unevaluated[z*y**Subscript[x,1]**y]];
  NCTest[y**Subscript[x,1]**y**z, Unevaluated[z*y**Subscript[x,1]**y]];

  NCTest[(z*y)**Subscript[x,1]**y, Unevaluated[z*y**Subscript[x,1]**y]];
  NCTest[y**(z*Subscript[x,1])**y, Unevaluated[z*y**Subscript[x,1]**y]];
  NCTest[y**Subscript[x,1]**(z*y), Unevaluated[z*y**Subscript[x,1]**y]];

  NCTest[NonCommutativeMultiply[Subscript[x,1]], Subscript[x,1]];
  NCTest[NonCommutativeMultiply[y], y];
  NCTest[NonCommutativeMultiply[z], z];

  NCTest[NonCommutativeMultiply[], 1];

  NCTest[Subscript[x,1]^2, Subscript[x,1]**Subscript[x,1]];
  NCTest[NonCommutativeMultiply[Subscript[x,1]^2], Subscript[x,1]**Subscript[x,1]];
  NCTest[NonCommutativeMultiply[Subscript[x,1]^2**y], Subscript[x,1]**Subscript[x,1]**y];
  NCTest[NonCommutativeMultiply[y**Subscript[x,1]^2], y**Subscript[x,1]**Subscript[x,1]];
  NCTest[NonCommutativeMultiply[y**Subscript[x,1]^2**y], y**Subscript[x,1]**Subscript[x,1]**y];

  NCTest[NonCommutativeMultiply[Subscript[x,1]^-2], Power[Subscript[x,1], -2]];
  NCTest[NonCommutativeMultiply[(Subscript[x,1]^-2)**y], Power[Subscript[x,1], -2]**y];
  NCTest[NonCommutativeMultiply[y**(Subscript[x,1]^-2)], y**Power[Subscript[x,1], -2]];
  NCTest[NonCommutativeMultiply[y**(Subscript[x,1]^-2)**y], y**Power[Subscript[x,1], -2]**y];

  NCTest[Head[Subscript[x,1]^-1], Power];
  NCTest[Head[NonCommutativeMultiply[Subscript[x,1]^-1]], Power];

  NCTest[Head[Subscript[x,1]^-3], Power];
  NCTest[Subscript[x,1]^2+Subscript[x,1]-Subscript[x,1]^0+Subscript[x,1]^-1, Power[Subscript[x,1],2]+Subscript[x,1]+Power[Subscript[x,1],-1]-1];
  NCTest[(Subscript[x,1]^0)**(Subscript[x,1]^1)**(Subscript[x,1]^2)**((Power[Subscript[x,1],-1])^3), 1];

  NCTest[List @@ (y**Subscript[x,1]^2), {y, Power[Subscript[x,1],2]}];
  NCTest[List @@ (Subscript[x,1]^2**y), {Power[Subscript[x,1],2], y}];
  NCTest[List @@ (y**Subscript[x,1]^2**y), {y, Power[Subscript[x,1], 2], y}];

  NCTest[y**Subscript[x,1]^2**z^3**y, z^3*y**Power[Subscript[x,1], 2]**y];
  NCTest[y**Subscript[x,1]^2**z**z**z**y, z^3*y**Subscript[x,1]**Subscript[x,1]**y];

  NCTest[Subscript[x,1]**Sqrt[2]**Subscript[x,1], Sqrt[2] Power[Subscript[x,1], 2]];
  NCTest[Subscript[x,1]**Pi**Subscript[x,1], Pi Power[Subscript[x,1], 2]];

  (* Power of slots *)
  exp = #1^2;
  NCTest[Head[exp], Power];

  (* Expand *)
  exp = x**(x+y);
  answer = x**x + x**y;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (x+y)**x;
  answer = x**x + y**x;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = x**(x+y)**x;
  answer = x**x**x + x**y**x;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = x**(x+y**(1+x)**y)**x;
  answer = x**x**x + x**y**y**x + x**y**x**y**x;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = x**inv[1 + x**(1 + x)];
  answer = x**inv[1 + x + x**x];
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (x**y)^2;
  answer = x**y**x**y;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (x ** y - 2 y ** x)^2;
  answer = x ** y ** x ** y - 2 x ** y ** y ** x - 2 y ** x ** x ** y + 4 y ** x ** y ** x;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = 3 (1 + x ** y + x + y ** x) ** (x ** a ** y ** d - 2 c ** y ** b ** x);
  answer = -6 c ** y ** b ** x + 3 x ** a ** y ** d + 3 x^2 ** a ** y ** d - 6 x ** c ** y ** b ** x + 3 y ** x^2 ** a ** y ** d - 6 x ** y ** c ** y ** b ** x + 3 x ** y ** x ** a ** y ** d - 6 y ** x ** c ** y ** b ** x;
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (1+x)^2;
  answer = (1+2x+x^2);
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (1+x)^(-2);
  answer = (1+2x+x^2)^(-1);
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (1+x**(1+x))^(2);
  answer = (1 + 2 x + 3 x^2 + 2 x^3 + x^4);
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  exp = (1+x**(1+x))^(-2);
  answer = (1 + 2 x + 3 x^2 + 2 x^3 + x^4)^(-1);
  NCTest[ExpandNonCommutativeMultiply[exp], answer];

  (* NCToList *)
  NCTest[NCToList[x], {x}];
  NCTest[NCToList[x^3], {x,x,x}];
  NCTest[NCToList[x^3 ** x], {x,x,x,x}];
  NCTest[NCToList[x**x^3 ** x], {x,x,x,x,x}];
  NCTest[NCToList[inv[x]], NCToList[inv[x]]];

  (* NCExpandExponents *)
  NCTest[NCExpandExponents[x**y], x**y];
  NCTest[List @@ ((x**y)^2), {x**y, 2}];
  NCTest[NCExpandExponents[(x**y)^2], x**y**x**y];
  NCTest[List @@ (x**(x**y)^2), {x, (x**y)^2}];
  NCTest[NCExpandExponents[x**(x**y)^2], x^2**y**x**y];
  NCTest[NCExpandExponents[(x**y)^2**y], x**y**x**y^2];
  NCTest[List @@ (x**(x**y)^2**y), {x, (x**y)^2, y}];
  NCTest[NCExpandExponents[x**(x**y)^2**y], x^2**y**x**y^2];

  (* power simplification *)
  NCTest[x^3 ** x, x^4];
  NCTest[x ** x^3, x^4];
  NCTest[x^2 ** x^3, x^5];
  NCTest[y ** x^3 ** x, y ** x^4];
  NCTest[y ** x ** x^3, y ** x^4];
  NCTest[y ** x^2 ** x^3, y ** x^5];
  NCTest[x^3 ** x ** y, x^4 ** y];
  NCTest[x ** x^3 ** y, x^4 ** y];
  NCTest[x^2 ** x^3 ** y, x^5 ** y];
  NCTest[y ** x^3 ** x ** y, y ** x^4 ** y];
  NCTest[y ** x ** x^3 ** y, y ** x^4 ** y];
  NCTest[y ** x^2 ** x^3 ** y, y ** x^5 ** y];
  NCTest[x^3 ** x^(-1), x^2];
  NCTest[x^(-1) ** x^3, x^2];
  NCTest[x^(-2) ** x^3, x];
  NCTest[y ** x^3 ** x^(-1), y ** x^2];
  NCTest[y ** x^(-1) ** x^3, y ** x^2];
  NCTest[y ** x^(-2) ** x^3, y ** x];
  NCTest[x^3 ** x^(-2) ** y, x ** y];
  NCTest[x ** x^3 ** y, x^4 ** y];
  NCTest[x^2 ** x^3 ** y, x^5 ** y];
  NCTest[y ** x^3 ** x ** y, y ** x^4 ** y];
  NCTest[y ** x ** x^3 ** y, y ** x^4 ** y];
  NCTest[y ** x^2 ** x^3 ** y, y ** x^5 ** y];

  NCTest[List @@ (inv[y] ** x ** inv[y]), {Power[y,-1], x, Power[y, -1]}];

  Quiet[

    (* CommuteEverything *)
    exp = x**(x+y);
    answer = Commutative[x]^2 + Commutative[x] Commutative[y];
    NCTest[Expand[CommuteEverything[exp]], answer];

    exp = (x+y)**x;
    answer = Commutative[x]^2 + Commutative[x] Commutative[y];
    NCTest[Expand[CommuteEverything[exp]], answer];

    exp = x**(x+y)**x;
    answer = Commutative[x]^3 + Commutative[x]^2 Commutative[y];
    NCTest[Expand[CommuteEverything[exp]], answer];

    exp = x**(x+y**(1+x)**y)**x;
    answer = Commutative[x]^3 + Commutative[x]^2 Commutative[y]^2 
	     + Commutative[x]^3 Commutative[y]^2;
    NCTest[Expand[CommuteEverything[exp]], answer];

    exp = x**inv[1 + x**(1 + x)];
    answer = Commutative[x] / (1 + Commutative[x] + Commutative[x]^2);
    NCTest[ExpandAll[CommuteEverything[exp]], answer];

    ,

    CommuteEverything::Warning
  ];

  EndCommuteEverything[];

  (* x[1] *)
  exp = NonCommutativeMultiply[x[1]];
  answer = x[1];
  NCTest[exp, answer];

  (* x[1,1] *)
  exp = NonCommutativeMultiply[x[1,1]];
  answer = x[1,1];
  NCTest[exp, answer];

  (* x[1,1,1] *)
  exp = NonCommutativeMultiply[x[1,1,1]];
  answer = x[1,1,1];
  NCTest[exp, answer];

  (* Patterns *)

  (* Slot *)
  exp = NonCommutativeMultiply[Slot[name]];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* Slot *)
  exp = NonCommutativeMultiply[Slot[1]];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* x_ *)
  exp = NonCommutativeMultiply[x_];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* x__ *)
  exp = NonCommutativeMultiply[x__];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* x___ *)
  exp = NonCommutativeMultiply[x___];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* _ *)
  exp = NonCommutativeMultiply[_];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* __ *)
  exp = NonCommutativeMultiply[__];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* ___ *)
  exp = NonCommutativeMultiply[___];
  NCTest[Head[exp], NonCommutativeMultiply];

  (* SetCommutingOperators *)
  SetCommutingOperators[x,y];
  NCTest[CommutingOperatorsQ[y,x]];
  NCTest[CommutingOperatorsQ[x,y]];

  UnsetCommutingOperators[y,x];
  NCTest[CommutingOperatorsQ[x,y], False];
  NCTest[CommutingOperatorsQ[y,x], False];

  SetCommutingOperators[x,y];
  NCTest[CommutingOperatorsQ[x,y]];
  NCTest[CommutingOperatorsQ[y,x]];

  NCTestCheck[SetCommutingOperators[y,x],
              SetCommutingOperators::AlreadyDefined];
  NCTest[CommutingOperatorsQ[x,y]];
  NCTest[CommutingOperatorsQ[y,x]];

  NCTest[CommutingOperatorsQ[x,x]];
  NCTest[CommutingOperatorsQ[x,1]];
  NCTest[CommutingOperatorsQ[1,x]];

  NCTest[CommutingOperatorsQ[x,w], False];

  (* Print["-------------------> " <> ToString[NCTest`Private`NCTestCounter]]; *)

];