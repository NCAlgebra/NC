<< NCPolynomial`

Module[
   {expr, answer, vars, p, p1, p2, rules,mat1,mat2,
   a,b,c,d,e,f,g,h,j,x,y,z,A,B,C,K},

   SetNonCommutative[a,b,c,d,e,f,g,h,j,x,y,z];
   SetCommutative[A,B,C,K];

   (* NCConsecutiveTerms *)
   vars = {x,y};
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[x,y,vars], True];
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[a,x,vars], False];
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[x,b,vars], False];
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[a,b,vars], True];

   NCTest[NCPolynomial`Private`NCConsecutiveTerms[tp[x],y,vars], True];
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[x,tp[y],vars], True];
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[tp[x],y,vars], True];
   NCTest[NCPolynomial`Private`NCConsecutiveTerms[tp[x],tp[y],vars], True];

   (* NCSplitMonomials *)
   expr = a**x**b;
   answer = {{1,a,x,b}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x}], answer];

   expr = a**x**b**c;
   answer = {{1,a,x,b**c}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x}], answer];

   expr = a**x**y**b;
   answer = {{1,a,x**y,b}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x,y}], answer];

   expr = a**x**y**b**c;
   answer = {{1,a,x**y,b**c}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x,y}], answer];

   expr = a**tp[x]**b;
   answer = {{1,a,tp[x],b}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x}], answer];

   expr = a**tp[x]**y**b;
   answer = {{1,a,tp[x]**y,b}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x,y}], answer];

   expr = x;
   answer = {{1,1,x,1}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x,y}], answer];

   expr = a**x;
   answer = {{1,a,x,1}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x,y}], answer];

   expr = a**x**y**b**c**x**f**y;
   answer = {{1,a,x**y,b**c,x,f,y,1}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x,y}], answer];

   expr = a**x**b+c**x**d;
   answer = {{1,a,x,b}, {1,c,x,d}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x}], answer];

   expr = A a**x**b + B c**x**d;
   answer = {{A,a,x,b}, {B,c,x,d}};
   NCTest[NCPolynomial`Private`NCSplitMonomials[expr, {x}], answer];

   (* NCPolynomial *)

   vars = {x,y};
   p = 0;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<||>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {}];
   NCTest[NCPDegree[expr], 0];

   p = 1;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[1,<||>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {}];
   NCTest[NCPDegree[expr], 0];

   p = a + B c;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[a+B c,<||>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {}];
   NCTest[NCPDegree[expr], 0];

   p = x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{0,1}}];
   NCTest[NCPDegree[expr], 1];

   p = x+a;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[a,<|{x}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = x+1;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[1,<|{x}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = 1.*x+1;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[1.,<|{x}->{{1.,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], 1.*x+1.];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = 1.*x+1.;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[1.,<|{x}->{{1.,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = x+y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{1,1,1}},{y}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{0,1}}];
   NCTest[NCPDegree[expr], 1];

   p = tp[x]+tp[y];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{tp[x]}->{{1,1,1}},{tp[y]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{0,1}}];
   NCTest[NCPDegree[expr], 1];

   p = x**x+tp[y];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x^2}->{{1,1,1}},{tp[y]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];

   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{2,0},{0,1}}];
   NCTest[NCPDegree[expr], 2];

   p = tp[x]**tp[x]+tp[y];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{tp[x]^2}->{{1,1,1}},{tp[y]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];

   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{2,0},{0,1}}];
   NCTest[NCPDegree[expr], 2];

   p = aj[x]**aj[x]+tp[y];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{aj[x]^2}->{{1,1,1}},{tp[y]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];

   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{2,0},{0,1}}];
   NCTest[NCPDegree[expr], 2];

   p = x+a**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{1,1,1},{1,a,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x**y}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = y**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**x}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = y**x**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**x^2}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], False];
   NCTest[NCPMonomialDegree[expr], {{2,1}}];
   NCTest[NCPDegree[expr], 3];

   p = x**y+y**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x**y}->{{1,1,1}}, {y**x}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1},{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = y**a**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y,x}->{{1,1,a,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = x**y**a+a**y**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**x}->{{1,a,1}}, {x**y}->{{1,1,a}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1},{1,1}}];
   NCTest[NCPDegree[expr], 2];

   NCTest[Apply[NCPolynomial`Private`NCPTermsToNCProductAux,
               Flatten[Apply[NCPolynomial`Private`NCPTermsToNCAux,
                       Normal[answer[[2]]],
                       {1}],1], {1}], {a**y**x, x**y**a}];

   p = x**x**a+a**y**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y^2}->{{1,a,1}}, {x^2}->{{1,1,a}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{0,2},{2,0}}];
   NCTest[NCPDegree[expr], 2];

   NCTest[Apply[NCPolynomial`Private`NCPTermsToNCProductAux,
               Flatten[Apply[NCPolynomial`Private`NCPTermsToNCAux,
                       Normal[answer[[2]]],
                       {1}],1], {1}], {a**y^2, x^2**a}];

   p = a**x**b+c+d**x**e+a**x**e**x**b;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[c,
                         <|{x}->{{1,a,b},{1,d,e}},
                           {x,x}->{{1,a,e,b}}|>, 
                         vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{2,0}}];
   NCTest[NCPDegree[expr], 2];

   p = a**x**b+c+d**x**e+a**x**e**x**b+a**x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[c,
                         <|{x}->{{1,a,b},{1,d,e}},
                           {x**y}->{{1,a,1}},
                           {x,x}->{{1,a,e,b}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{1,1},{2,0}}];
   NCTest[NCPDegree[expr], 2];
   NCTest[NCPDecompose[answer], 
          <|{1,0}->a**x**b + d**x**e,
	    {1,1}->a**x**y,
	    {2,0}->a**x**e**x**b,
	    {0,0}->c|>];

   p = A x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = B y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{0,1}}];
   NCTest[NCPDegree[expr], 1];

   p = A x + B a;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[B a,<|{x}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = A x + B y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{A,1,1}},{y}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{0,1}}];
   NCTest[NCPDegree[expr], 1];

   p = A x + B a**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{A,1,1},{B,a,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], True];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0}}];
   NCTest[NCPDegree[expr], 1];

   p = A x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x**y}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = B y**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**x}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = A x**y + B y**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x**y}->{{A,1,1}}, {y**x}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1},{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = A x**y + B y**x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x**y}->{{A,1,1}}, {y**x**y}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], False];
   NCTest[NCPMonomialDegree[expr], {{1,1},{1,2}}];
   NCTest[NCPDegree[expr], 3];

   p = A x**y + B x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x**y}->{{A+B,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = (A + B) x**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = x + A x**y + B x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{1,1,1}},{x**y}->{{A+B,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = x + (A + B) x**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = x +  x**y + B x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{1,1,1}},{x**y}->{{1+B,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = x + (1 + B) x**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = x +  x**y + x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{x}->{{1,1,1}},{x**y}->{{1+1,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = x + (1 + 1) x**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = A y**a**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y,x}->{{A,1,a,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = A x**y**a + B a**y**x;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**x}->{{B,a,1}}, {x**y}->{{A,1,a}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,1},{1,1}}];
   NCTest[NCPDegree[expr], 2];
   NCTest[NCPDecompose[answer], 
          <|{1,1}->A x**y**a + B a**y**x|>];


   p = A a**x**b + B c + C d**x**e + A B a**x**e**x**b;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[B c,
                         <|{x}->{{A,a,b},{C,d,e}},
                           {x,x}->{{A B,a,e,b}}|>, 
                         vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{2,0}}];
   NCTest[NCPDegree[expr], 2];

   p = A a**x**b + B c + C d**x**e + A B a**x**e**x**b + A C a**x**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[B c,
                         <|{x}->{{A,a,b},{C,d,e}},
                           {x**y}->{{A C,a,1}},
                           {x,x}->{{A B,a,e,b}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1,0},{1,1},{2,0}}];
   NCTest[NCPDegree[expr], 2];

   NCTest[NCPTermsOfDegree[expr, {1,0}], <|{x}->{{A,a,b},{C,d,e}}|>];
   NCTest[NCPTermsOfDegree[expr, {1,1}], <|{x**y}->{{A C,a,1}}|>];
   NCTest[NCPTermsOfDegree[expr, {2,0}], <|{x,x}->{{A B,a,e,b}}|>];
   NCTest[NCPTermsOfDegree[expr, {2,2}], <||>];
   NCTest[NCPTermsOfDegree[expr, {0,0}], <|{}->{{B c}}|>];

   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {1,0}]], A a**x**b + C d**x**e];
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {1,1}]], A C a**x**y];
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {2,0}]], A B a**x**e**x**b]; 
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {2,2}]], 0]; 
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {0,0}]], B c]; 

   NCTest[NCPTermsOfTotalDegree[expr, 1], <|{x}->{{A,a,b},{C,d,e}}|>]; 
   NCTest[NCPTermsOfTotalDegree[expr, 2], <|{x**y}->{{A C,a,1}},
                                          {x,x}->{{A B,a,e,b}}|>];
   NCTest[NCPTermsOfTotalDegree[expr, 3], <||>];
   NCTest[NCPTermsOfTotalDegree[expr, 0], <|{}->{{B c}}|>];

   p = x**inv[z];
   expr = NCToNCPolynomial[p, vars];
   NCTest[expr, NCPolynomial[0,<|{x}->{{1,1,inv[z]}}|>, vars]];

   p = x**tp[x]+y**y;
   expr = NCToNCPolynomial[p, vars];
   NCTest[expr, NCPolynomial[0,<|{y**y}->{{1,1,1}},{x**tp[x]}->{{1,1,1}}|>, vars]];

   p = tp[x]+y**y;
   expr = NCToNCPolynomial[p, vars];
   NCTest[expr, NCPolynomial[0,<|{y**y}->{{1,1,1}},{tp[x]}->{{1,1,1}}|>, vars]];

   Quiet[

     (* NotPolynomial *)
     p = x**inv[y];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     p = x**inv[y];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     p = x**inv[1 + y];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     p = x**inv[1 + y] + inv[1 + x];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     (* Commutative product fails *)
     p = x*y;
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     ,
     NCPolynomial::NotPolynomial
   ];

   (* VarNotSymbol *)
   NCTestCheck[NCToNCPolynomial[x**tp[y], {tp[x]}],
               $Failed,
               NCPolynomial::VarNotSymbol];

   NCTestCheck[NCToNCPolynomial[x**tp[y], {x, tp[x]}],
	       $Failed,
	       NCPolynomial::VarNotSymbol];

   (* Repeated vars *)
   NCTestCheck[NCToNCPolynomial[x**tp[y], {x, y, x}],
	       $Failed,
	       NCPolynomial::InvalidList];

   (* NCPSameVariablesQ *)
   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x}];
   NCTest[NCPSameVariablesQ[p1,p1], True];
   NCTest[NCPSameVariablesQ[p1,p1,p1], True];
   NCTest[NCPCompatibleQ[p1,p1], True];
   NCTest[NCPCompatibleQ[p1,p1,p1], True];

   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x}];
   expr = x**a+y**b;
   p2 = NCToNCPolynomial[expr, {x}];
   NCTest[NCPSameVariablesQ[p1,p2], True];
   NCTest[NCPSameVariablesQ[p1,p2,p1], True];
   NCTest[NCPCompatibleQ[p1,p2], True];
   NCTest[NCPCompatibleQ[p1,p2,p1], True];

   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x}];
   expr = x**a+y**b;
   p2 = NCToNCPolynomial[expr, {x,y}];
   NCTest[NCPSameVariablesQ[p1,p2], False];
   NCTest[NCPSameVariablesQ[p1,p2,p1], False];
   NCTest[NCPCompatibleQ[p1,p2], False];
   NCTest[NCPCompatibleQ[p1,p2,p1], False];

   (* NCPPlus *)
   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x}];
   p2 = NCPPlus[p1,p1];
   answer = NCPolynomial[2 b ** y, <|{x}->{{2,a,1}}|>, {x}];
   NCTest[p2, answer];

   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x}];
   expr = x**a+y**b;
   p2 = NCToNCPolynomial[expr, {x}];
   answer = NCPolynomial[y**b+b**y, 
                         <|{x}->{{1,a,1},{1,1,a}}|>, {x}];
   NCTest[NCPPlus[p1,p2], answer];

   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x,y}];
   p2 = NCPPlus[p1,p1];
   answer = NCPolynomial[0, <|{x}->{{2,a,1}},
                              {y}->{{2,b,1}}|>, {x,y}];
   NCTest[p2, answer];
   
   expr = a**x+b**y;
   p1 = NCToNCPolynomial[expr, {x,y}];
   expr = x**a+y**b;
   p2 = NCToNCPolynomial[expr, {x,y}];
   answer = NCPolynomial[0, 
                         <|{x}->{{1,a,1},{1,1,a}},
			   {y}->{{1,b,1},{1,1,b}}|>, {x,y}];
   NCTest[NCPPlus[p1,p2], answer];

   (* NCPolynomial with float coefficients *)
   expr = 1.*x-2.*y;
   p1 = NCToNCPolynomial[expr, {x,y}];
   expr = 1.*x+2.*y;
   p2 = NCToNCPolynomial[expr, {x,y}];
   answer = NCPolynomial[0.,
                         <|{x}->{{2.,1,1}}|>, {x,y}];
   NCTest[NCPPlus[p1,p2], answer];

   (* NCPSort *)
   expr = c;
   p = NCToNCPolynomial[expr, {x,y}];
   answer = {c};
   NCTest[NCPSort[p], answer];

   expr = c + x - y;
   p = NCToNCPolynomial[expr, {x,y}];
   answer = {c, x, -y};
   NCTest[NCPSort[p], answer];

   expr = c + x - y;
   p = NCToNCPolynomial[expr, {y,x}];
   answer = {c, x, -y};
   NCTest[NCPSort[p], answer];

   expr = c + x**x - y;
   p = NCToNCPolynomial[expr, {x,y}];
   answer = {c, x^2, -y};
   NCTest[NCPSort[p], answer];

   expr = c + x**x - 2 y;
   p = NCToNCPolynomial[expr, {x,y}];
   answer = {c, x^2, -2 y};
   NCTest[NCPSort[p], answer];

   expr = a**x**b+c+2 d**x**e-a**x**e**x**b+a**x**y;
   p = NCToNCPolynomial[expr, {x,y}];
   answer = {c, a**x**b, 2 d**x**e, a**x**y, -a**x**e**x**b};
   NCTest[NCPSort[p], answer];

   (* NCToNCPolynomial with no variable list *)
   expr = A B + A a**x**b + B c + C d**x**e + A B a**x**e**x**b + A C a**x**y;
   p = NCToNCPolynomial[expr];
   answer = NCPolynomial[A B, 
                         <|{c} -> {{B, 1, 1}}, 
                           {a**x**b} -> {{A, 1, 1}}, 
                           {a**x**y} -> {{A C, 1, 1}}, 
                           {d**x**e} -> {{C, 1, 1}}, 
                           {a**x**e**x**b} -> {{A B, 1, 1}}|>, 
                           {a, b, c, d, e, x, y}];
   NCTest[p, answer];

   (* NCRationalToNCPolynomial *)

   expr = 1 + inv[d] ** c ** inv[S - a] ** b - inv[d] ** c ** 
              inv[S - a + b ** inv[d] ** c] ** b - inv[d] ** c ** 
              inv[S - a + b ** inv[d] ** c] ** b ** inv[d] ** c ** 
              inv[S - a] ** b;
   {p, vars, rules} = NCRationalToNCPolynomial[expr, {a,b,c}];
   answer = 1 + inv[d] ** c ** vars[[1]] ** b - inv[d] ** c ** 
              vars[[2]] ** b - inv[d] ** c ** 
              vars[[2]] ** b ** inv[d] ** c ** 
              vars[[1]] ** b;
   NCTest[ExpandNonCommutativeMultiply[NCPolynomialToNC[p]], answer];
   NCTest[ExpandNonCommutativeMultiply[(NCPolynomialToNC[p] //. rules) - expr], 0];

   expr = 1 + inv[d] ** c ** inv[S - a] ** b - inv[d] ** c ** 
              inv[S - a + b ** inv[d] ** c] ** b - inv[d] ** c ** 
              inv[S - a + b ** inv[d] ** c] ** b ** inv[d] ** c ** 
              inv[S - a] ** b;
   {p, vars, rules} = NCRationalToNCPolynomial[expr];
   answer = 1 + vars[[1]] ** c ** vars[[2]] ** b - vars[[1]] ** c ** 
              vars[[3]] ** b - vars[[1]] ** c ** 
              vars[[3]] ** b ** vars[[1]] ** c ** 
              vars[[2]] ** b;
   NCTest[ExpandNonCommutativeMultiply[NCPolynomialToNC[p]], answer];
   NCTest[ExpandNonCommutativeMultiply[(NCPolynomialToNC[p] //. rules) - expr], 0];

   expr = 1 + c ** inv[a^2] ** b;
   {p, vars, rules} = NCRationalToNCPolynomial[expr, {a,b,c}];
   answer = 1 + c ** vars[[1]]^2 ** b;
   NCTest[ExpandNonCommutativeMultiply[NCPolynomialToNC[p]], answer];
   NCTest[ExpandNonCommutativeMultiply[(NCPolynomialToNC[p] //. rules) - expr], 0];
   
   expr = 1 + c ** inv[(a**b)^2] ** b + a ** (1 + inv[b]);
   {p, vars, rules} = NCRationalToNCPolynomial[expr, {a,b,c}];
   answer = 1 + c ** vars[[2]]^2 ** b + a ** (1 + vars[[1]]);
   NCTest[NCPolynomialToNC[p], ExpandNonCommutativeMultiply[answer]];
   NCTest[rules, {vars[[1]] -> inv[b], vars[[2]] -> inv[a**b]}];
   NCTest[ExpandNonCommutativeMultiply[(NCPolynomialToNC[p] //. rules) - expr], 0];

   expr = 1 + c ** inv[(a**b)^2] ** b + a ** (1 + inv[a**b]);
   {p, vars, rules} = NCRationalToNCPolynomial[expr, {a,b,c}];
   answer = 1 + c ** vars[[1]]^2 ** b + a ** (1 + vars[[1]]);
   NCTest[NCPolynomialToNC[p], ExpandNonCommutativeMultiply[answer]];
   NCTest[rules, {vars[[1]] -> inv[a**b]}];
   NCTest[ExpandNonCommutativeMultiply[(NCPolynomialToNC[p] //. rules) - expr], 0];

   expr = 1 + c ** inv[a^2] ** b + a ** (1 + inv[1 + inv[a]]);
   {p, vars, rules} = NCRationalToNCPolynomial[expr, {a,b,c}];
   answer = 1 + c ** vars[[2]]^2 ** b + a ** (1 + vars[[1]]);
   NCTest[NCPolynomialToNC[p], ExpandNonCommutativeMultiply[answer]];
   NCTest[rules, {vars[[1]] -> inv[1 + vars[[2]]], vars[[2]] -> inv[a]}];
   NCTest[ExpandNonCommutativeMultiply[(NCPolynomialToNC[p] //. rules) - expr], 0];

   Quiet[

     vars = {x,y};
     
     (* NotPolynomial *)
     p = x inv[y];
     expr = NCRationalToNCPolynomial[p, vars];
     NCTest[expr, {$Failed, {}, {}}];

     p = x inv[y];
     expr = NCRationalToNCPolynomial[p, vars];
     NCTest[expr, {$Failed, {}, {}}];

     p = x inv[1 + y];
     expr = NCRationalToNCPolynomial[p, vars];
     NCTest[expr, {$Failed, {}, {}}];

     p = x inv[1 + y] + inv[1 + x];
     expr = NCRationalToNCPolynomial[p, vars];
     NCTest[expr, {$Failed, {}, {}}];

     (* Commutative product fails *)
     p = x*y;
     expr = NCRationalToNCPolynomial[p, vars];
     NCTest[expr, {$Failed, {}, {}}];

     ,
     NCPolynomial::NotRational
   ];
   
   (* Matrix NCPolynomial *)

   (* NCPVectorize *)

   p = NCToNCPolynomial[a**x+x**a, {x}];
   answer = NCPolynomial[SparseArray[{{0, 0}, {0, 0}}], <|{x} -> {{1, SparseArray[{{a}, {0}}], SparseArray[{{1, 0}}]}, {1, SparseArray[{{1}, {0}}], SparseArray[{{a, 0}}]}}|>, {x}];
   NCTest[NCPolynomial`Private`NCPVectorize[p, {2,2}, {1,1}],
          answer];

   answer = NCPolynomial[SparseArray[{{0, 0, 0}, {0, 0, 0}}], <|{x} -> {{1, SparseArray[{{a}, {0}}], SparseArray[{{1, 0, 0}}]}, {1, SparseArray[{{1}, {0}}], SparseArray[{{a, 0, 0}}]}}|>, {x}];
   NCTest[NCPolynomial`Private`NCPVectorize[p, {2,3}, {1,1}],
          answer];

   mat = {{a**x+x**a,b**x},{x**b,1}};
   p = NCToNCPolynomial[mat, {x}];
   answer = NCPolynomial[SparseArray[{{0,0},{0,1}}], 
                    <|{x}->{{1,SparseArray[{{a},{0}}],SparseArray[{{1,0}}]},
	                    {1,SparseArray[{{1},{0}}],SparseArray[{{a,0}}]},
			    {1,SparseArray[{{b},{0}}],SparseArray[{{0,1}}]},
			    {1,SparseArray[{{0},{1}}],SparseArray[{{b,0}}]}}|>,
		    {x}];
   NCTest[p, answer];

   NCTest[Apply[NCPolynomial`Private`NCPTermsToNCProductAux,
               Flatten[Apply[NCPolynomial`Private`NCPTermsToNCAux,
                       Normal[answer[[2]]],
                       {1}],1], {1}],
          {{{a**x,0},{0,0}},{{x**a,0},{0,0}},{{0,b**x},{0,0}},{{0,0},{x**b,0}}}
   ];

   NCTest[NCPTermsToNC[p[[2]]] + p[[1]], mat];
   NCTest[NCPolynomialToNC[answer], mat];

   mat = {{a**x+x**a+c**y+y**c,b**x},{x**b,1}};
   p = NCToNCPolynomial[mat, {x}];
   answer = NCPolynomial[SparseArray[{{c**y+y**c,0},{0,1}}], 
                    <|{x}->{{1,SparseArray[{{a},{0}}],SparseArray[{{1,0}}]},
	                    {1,SparseArray[{{1},{0}}],SparseArray[{{a,0}}]},
			    {1,SparseArray[{{b},{0}}],SparseArray[{{0,1}}]},
			    {1,SparseArray[{{0},{1}}],SparseArray[{{b,0}}]}}|>,
		    {x}];
   NCTest[p, answer];
   NCTest[NCPolynomialToNC[answer], mat];

   mat = {{a**x+x**a+c**y+y**c,b**x},{x**b,1}};
   p = NCToNCPolynomial[mat, {x,y}];
   answer = NCPolynomial[SparseArray[{{0,0},{0,1}}], 
                    <|{x}->{{1,SparseArray[{{a},{0}}],SparseArray[{{1,0}}]},
	                    {1,SparseArray[{{1},{0}}],SparseArray[{{a,0}}]},
			    {1,SparseArray[{{b},{0}}],SparseArray[{{0,1}}]},
			    {1,SparseArray[{{0},{1}}],SparseArray[{{b,0}}]}},
		      {y}->{{1,SparseArray[{{c},{0}}],SparseArray[{{1,0}}]},
	                    {1,SparseArray[{{1},{0}}],SparseArray[{{c,0}}]}}|>,
		    {x,y}];
   NCTest[p, answer];
   NCTest[NCPolynomialToNC[answer], mat];

   mat = {{x**a**x+x**a+a**x,b**x},{x**b,1}};
   p = NCToNCPolynomial[mat, {x,y}];
   answer = NCPolynomial[SparseArray[{{0,0},{0,1}}], 
                    <|{x}->{{1,SparseArray[{{a},{0}}],SparseArray[{{1,0}}]},
  	                    {1,SparseArray[{{1},{0}}],SparseArray[{{a,0}}]},
			    {1,SparseArray[{{b},{0}}],SparseArray[{{0,1}}]},
			    {1,SparseArray[{{0},{1}}],SparseArray[{{b,0}}]}},
		      {x,x}->{{1,SparseArray[{{1},{0}}],a,SparseArray[{{1,0}}]}}|>,
		    {x,y}];
   NCTest[p, answer];
   NCTest[NCPolynomialToNC[answer], mat];

   mat = {{x**a**x+x**a+a**x,b**x},{x**b,1+d**x**x**d}};
   p = NCToNCPolynomial[mat, {x,y}];
   answer = NCPolynomial[SparseArray[{{0,0},{0,1}}], 
                    <|{x}->{{1,SparseArray[{{a},{0}}],SparseArray[{{1,0}}]},
  	                    {1,SparseArray[{{1},{0}}],SparseArray[{{a,0}}]},
			    {1,SparseArray[{{b},{0}}],SparseArray[{{0,1}}]},
			    {1,SparseArray[{{0},{1}}],SparseArray[{{b,0}}]}},
		      {x,x}->{{1,SparseArray[{{1},{0}}],a,SparseArray[{{1,0}}]}},
		      {x**x}->{{1,SparseArray[{{0},{d}}],SparseArray[{{0,d}}]}}|>,
		    {x,y}];
   NCTest[p, answer];
   NCTest[NCPolynomialToNC[answer], mat];

   mat = {{a**x+x**a,b**x},{x**b,1}};
   p1 = NCToNCPolynomial[mat, {x}];
   mat = {{a**x+x**a,b**x,2},{x**b,1,3}};
   p2 = NCToNCPolynomial[mat, {x}];
   NCTest[NCPCompatibleQ[p1,p1], True];
   NCTest[NCPCompatibleQ[p1,p1,p1], True];
   NCTest[NCPCompatibleQ[p1,p2], False];
   NCTest[NCPCompatibleQ[p1,p2,p2], False];
   NCTest[NCPCompatibleQ[p2,p2], True];

   (* Operators *)
   vars = {x, y};
   answer = NCPolynomial[0, <| |>, vars];

   p1 = p2 = NCToNCPolynomial[1 + x, vars];
   p = NCToNCPolynomial[(1 + x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[1 + x + x^2, vars];
   p = NCToNCPolynomial[(1 + x + x^2)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[x ** y - 2 y ** x, vars];
   p = NCToNCPolynomial[(x ** y - 2 y ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[x ** y - 2 y ** a ** x, vars];
   p = NCToNCPolynomial[(x ** y - 2 y ** a ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[x ** a ** y - 2 y ** b ** x, vars];
   p = NCToNCPolynomial[(x ** a ** y - 2 y ** b ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[x ** a ** y - 2 c ** y ** b ** x, vars];
   p = NCToNCPolynomial[(x ** a ** y - 2 c ** y ** b ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[x ** a ** y ** d - 2 c ** y ** b ** x, vars];
   p = NCToNCPolynomial[(x ** a ** y ** d - 2 c ** y ** b ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[x ** y + x + y ** x, vars];
   p = NCToNCPolynomial[(x ** y + x + y ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = p2 = NCToNCPolynomial[1 + x ** y + x + y ** x, vars];
   p = NCToNCPolynomial[(1 + x ** y + x + y ** x)^2, vars];
   NCTest[p - NCPDot[p1, p2], answer];

   p1 = NCToNCPolynomial[1 + x ** y + x + y ** x, vars];
   p2 = NCToNCPolynomial[x ** a ** y ** d - 2 c ** y ** b ** x, vars];
   p = NCToNCPolynomial[(1 + x ** y + x + y ** x)**(x ** a ** y ** d - 2 c ** y ** b ** x), vars];
   NCTest[p - NCPDot[p1, p2], answer];

   (* ** *)
   NCTest[p - p1 ** p2, answer];
   p = NCToNCPolynomial[3 (1 + x ** y + x + y ** x)**(x ** a ** y ** d - 2 c ** y ** b ** x), vars];
   NCTest[p - 3 NCPDot[p1, p2], answer];

   (* matrix arguments *)
   
   mat1 = {{a ** x + x ** a + c ** y + y ** c - x ** q ** x, b ** x},
           {x ** b, 1}};
 
   p1 = NCToNCPolynomial[mat1, {x, y}];
   answer = ConstantArray[0, {2,2}];
   NCTest[mat1 - NCPolynomialToNC[p1], answer];

   mat2 = {{1, x ** c}, {c ** x, 1}};
   p2 = NCToNCPolynomial[mat2, {x, y}];
   NCTest[mat2 - NCPolynomialToNC[p2], answer];

   NCTest[NCPolynomialToNC[p1 ** p2] - NCDot[mat1, mat2] // NCExpand, answer];

   (* TODO: Test NCPolynomials with matrix variables. 
      See NCSylvester.NCTest *)

   (* symbols as subsctripts *)

   vars = {Subscript[x,1], y};
   
   p = Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = Subscript[x,1]+a;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[a,<|{Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = Subscript[x,1]+y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y}->{{1,1,1}},{Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = tp[Subscript[x,1]]+tp[y];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{tp[y]}->{{1,1,1}},{tp[Subscript[x,1]]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];
   
   p = tp[Subscript[x,1]]**tp[Subscript[x,1]]+tp[y];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{tp[y]}->{{1,1,1}},{tp[Subscript[x,1]]^2}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = Subscript[x,1]+a**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]}->{{1,a,1},{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPMonomialDegree[expr], {{1,1}}];
   NCTest[NCPDegree[expr], 2];

   p = y**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = Subscript[x,1]**y+y**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**Subscript[x,1]}->{{1,1,1}},{Subscript[x,1]**y}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = y**a**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y,Subscript[x,1]}->{{1,1,a,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = Subscript[x,1]**y**a+a**y**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**Subscript[x,1]}->{{1,a,1}}, {Subscript[x,1]**y}->{{1,1,a}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = a**Subscript[x,1]**b+c+d**Subscript[x,1]**e+a**Subscript[x,1]**e**Subscript[x,1]**b;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[c,
                         <|{Subscript[x,1]}->{{1,a,b},{1,d,e}},
                           {Subscript[x,1],Subscript[x,1]}->{{1,a,e,b}}|>, 
                         vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = a**Subscript[x,1]**b+c+d**Subscript[x,1]**e+a**Subscript[x,1]**e**Subscript[x,1]**b+a**Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[c,
                         <|{Subscript[x,1]}->{{1,a,b},{1,d,e}},
                           {Subscript[x,1]**y}->{{1,a,1}},
                           {Subscript[x,1],Subscript[x,1]}->{{1,a,e,b}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = A Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = B y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = A Subscript[x,1] + B a;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[B a,<|{Subscript[x,1]}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = A Subscript[x,1] + B y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y}->{{B,1,1}},{Subscript[x,1]}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = A Subscript[x,1] + B a**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]}->{{B,a,1},{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 1];

   p = A Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = B y**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**Subscript[x,1]}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = A Subscript[x,1]**y + B y**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**Subscript[x,1]}->{{B,1,1}},{Subscript[x,1]**y}->{{A,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = A Subscript[x,1]**y + B y**Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{A,1,1}}, {y**Subscript[x,1]**y}->{{B,1,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 3];

   p = A Subscript[x,1]**y + B Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{A+B,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = (A + B) Subscript[x,1]**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPDegree[expr], 2];

   p = Subscript[x,1] + A Subscript[x,1]**y + B Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{A+B,1,1}},{Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = Subscript[x,1] + (A + B) Subscript[x,1]**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPDegree[expr], 2];

   p = Subscript[x,1] +  Subscript[x,1]**y + B Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{1+B,1,1}},{Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = Subscript[x,1] + (1 + B) Subscript[x,1]**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPDegree[expr], 2];

   p = Subscript[x,1] +  Subscript[x,1]**y + Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{Subscript[x,1]**y}->{{1+1,1,1}},{Subscript[x,1]}->{{1,1,1}}|>, vars];
   NCTest[expr, answer];
   answer = Subscript[x,1] + (1 + 1) Subscript[x,1]**y;
   NCTest[NCPolynomialToNC[expr], answer];
   NCTest[NCPDegree[expr], 2];

   p = A y**a**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y,Subscript[x,1]}->{{A,1,a,1}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = A Subscript[x,1]**y**a + B a**y**Subscript[x,1];
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[0,<|{y**Subscript[x,1]}->{{B,a,1}}, {Subscript[x,1]**y}->{{A,1,a}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPDegree[expr], 2];

   p = A a**Subscript[x,1]**b + B c + C d**Subscript[x,1]**e + A B a**Subscript[x,1]**e**Subscript[x,1]**b;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[B c,
                         <|{Subscript[x,1]}->{{A,a,b},{C,d,e}},
                           {Subscript[x,1],Subscript[x,1]}->{{A B,a,e,b}}|>, 
                         vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   p = A a**Subscript[x,1]**b + B c + C d**Subscript[x,1]**e + A B a**Subscript[x,1]**e**Subscript[x,1]**b + A C a**Subscript[x,1]**y;
   expr = NCToNCPolynomial[p, vars];
   answer = NCPolynomial[B c,
                         <|{Subscript[x,1]}->{{A,a,b},{C,d,e}},
                           {Subscript[x,1]**y}->{{A C,a,1}},
                           {Subscript[x,1],Subscript[x,1]}->{{A B,a,e,b}}|>, vars];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPDegree[expr], 2];

   (* NCPTermsOfDegree *)

   NCTest[NCPTermsOfDegree[expr, {1,0}], <|{Subscript[x,1]}->{{A,a,b},{C,d,e}}|>];
   NCTest[NCPTermsOfDegree[expr, {1,1}], <|{Subscript[x,1]**y}->{{A C,a,1}}|>];
   NCTest[NCPTermsOfDegree[expr, {2,0}], <|{Subscript[x,1],Subscript[x,1]}->{{A B,a,e,b}}|>];
   NCTest[NCPTermsOfDegree[expr, {2,2}], <||>];
   NCTest[NCPTermsOfDegree[expr, {0,0}], <|{}->{{B c}}|>];

   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {1,0}]], A a**Subscript[x,1]**b + C d**Subscript[x,1]**e];
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {1,1}]], A C a**Subscript[x,1]**y];
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {2,0}]], A B a**Subscript[x,1]**e**Subscript[x,1]**b]; 
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {2,2}]], 0]; 
   NCTest[NCPTermsToNC[NCPTermsOfDegree[expr, {0,0}]], B c]; 

   NCTest[NCPTermsOfTotalDegree[expr, 1], <|{Subscript[x,1]}->{{A,a,b},{C,d,e}}|>]; 
   NCTest[NCPTermsOfTotalDegree[expr, 2], <|{Subscript[x,1]**y}->{{A C,a,1}},
                                          {Subscript[x,1],Subscript[x,1]}->{{A B,a,e,b}}|>];
   NCTest[NCPTermsOfTotalDegree[expr, 3], <||>];
   NCTest[NCPTermsOfTotalDegree[expr, 0], <|{}->{{B c}}|>];

   (* Univariate *)
   
   p = a**x**b+c+d**x**e+a**x**e**x**b+a**x**y;
   expr = NCToNCPolynomial[p, x];
   answer = NCPolynomial[c,
                         <|{x}->{{1,a,b},{1,a,y},{1,d,e}},
                           {x,x}->{{1,a,e,b}}|>, {x}];
   NCTest[expr, answer];
   NCTest[NCPolynomialToNC[expr], p];
   NCTest[NCPLinearQ[expr], False];
   NCTest[NCPQuadraticQ[expr], True];
   NCTest[NCPMonomialDegree[expr], {{1},{2}}];
   NCTest[NCPDegree[expr], 2];
   NCTest[NCPDecompose[answer], 
          <|{1}->a**x**b + d**x**e + a**x**y,
	    {2}->a**x**e**x**b,
	    {0}->c|>];

   Quiet[

     (* NotPolynomial *)
     p = y**inv[Subscript[x,1]];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     p = inv[Subscript[x,1]]**y;
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     p = Subscript[x,1]**inv[1 + y];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     p = Subscript[x,1]**inv[1 + y] + inv[1 + Subscript[x,1]];
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     (* Commutative product fails *)
     p = Subscript[x,1]*y;
     expr = NCToNCPolynomial[p, vars];
     NCTest[expr, $Failed];

     ,
     NCPolynomial::NotPolynomial
   ];

   Quiet[

     (* VarNotSymbol *)
     p = Subscript[x,1]**tp[y];
     expr = NCToNCPolynomial[p, {tp[Subscript[x,1]]}];
     NCTest[expr, $Failed];

     p = Subscript[x,1]**tp[y];
     expr = NCToNCPolynomial[p, {Subscript[x,1], tp[Subscript[x,1]]}];
     NCTest[expr, $Failed];

     ,
     NCPolynomial::VarNotSymbol
   ];

   (* Print["-------------------> " <> ToString[NCTest`Private`NCTestCounter]]; *)
 
];