<< NCSylvester`
<< NCSelfAdjoint`

Block[
   {exp, answer, vars, p,
   a,b,c,d,e,f,g,h,j,x,y,z,w,A,B,C,
   isSym, symList},

   SetNonCommutative[a,b,c,d,e,f,g,h,j,x,y,z,w];
   SetCommutative[A,B,C];

   vars = {x};
   exp = 2 a**x**b + 3 c**x**d;
   p = NCToNCPolynomial[exp, vars];
   answer = {0, <|x -> {{a,c},{b,d},SparseArray[{{2,0},{0,3}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[NCPolynomialToNC[NCSylvesterToNCPolynomial[answer]],
          exp];

   vars = {x};
   exp = 2 a**x**b + 3 a**x**d + c**x**d;
   p = NCToNCPolynomial[exp, vars];
   answer = {0,<|x->{{a,c},{b,d},SparseArray[{{2,3},{0,1}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   exp = 2 a**x**c + a**x**d + b**x**c - b**x**d;
   p = NCToNCPolynomial[exp, vars];
   answer = {0,<|x->{{a,b},{c,d},SparseArray[{{2,1},{1,-1}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   vars = {y};
   exp = 2 a**x**c + a**x**d + b**x**c - b**x**d;
   p = NCToNCPolynomial[exp, vars];
   answer = {exp, <|y->{{},{},SparseArray[{}, {0, 0}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   vars = {y};
   exp = 2 a**x**c + a**x**d + b**x**c - b**x**d + f**y**h;
   p = NCToNCPolynomial[exp, vars];
   answer = {2 a**x**c + a**x**d + b**x**c - b**x**d,
             <|y->{{f},{h},SparseArray[{{1}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   vars = {x,y};
   exp = 2 a**x**c + a**x**d + b**x**c - b**x**d + f**y**h;
   p = NCToNCPolynomial[exp, vars];
   answer = {0, 
             <|x->{{a,b},{c,d},SparseArray[{{2,1},{1,-1}}]},
               y->{{f},{h},SparseArray[{{1}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   (* one of the variables does not appear *)
   vars = {x,y};
   exp = 2 a**x**c + a**x**d + b**x**c - b**x**d;
   p = NCToNCPolynomial[exp, vars];
   answer = {0, 
             <|x->{{a,b},{c,d},SparseArray[{{2,1},{1,-1}}]},
               y->{{},{},SparseArray[{}, {0, 0}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   answer = NCPolynomial[0, 
                         <|{x}->{{1,a+b/2,2c+d},{-3/2,b,d}}|>,
			 {x,y}];
   NCTest[NCSylvesterToNCPolynomial[NCPToNCSylvester[p]], answer];
   answer = NCPolynomial[0, 
                         <|{x}->{{1,a+b/2,2c+d},{-3/2,b,d}},
                           {y}->{{1,0,0}}|>,
			 {x,y}];
   NCTest[NCSylvesterToNCPolynomial[NCPToNCSylvester[p], KeepZeros -> True], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[NCPToNCSylvester[p]]]],
          exp];

   exp = 2 + a**x**b + c**x**d + y;
   p = NCToNCPolynomial[exp, vars];
   answer = {2, 
             <|x->{{a,c},{b,d},SparseArray[{{1,0},{0,1}}]},
               y->{{1},{1},SparseArray[{{1}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   exp = 2 + a**Subscript[x,1]**b + c**Subscript[x,1]**d + y;
   p = NCToNCPolynomial[exp, {Subscript[x,1], y}];
   answer = {2, 
             <|Subscript[x,1]->{{a,c},{b,d},SparseArray[{{1,0},{0,1}}]},
               y->{{1},{1},SparseArray[{{1}}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];
	  
   exp = 0;
   p = NCToNCPolynomial[exp, vars];
   answer = {0,
             <|x->{{},{},SparseArray[{}, {0, 0}]}, 
               y->{{},{},SparseArray[{}, {0, 0}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   exp = 1;
   p = NCToNCPolynomial[exp, vars];
   answer = {1,
             <|x->{{},{},SparseArray[{}, {0, 0}]}, 
               y->{{},{},SparseArray[{}, {0, 0}]}|>};
   NCTest[NCPToNCSylvester[p], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
          exp];

   Quiet[

     vars = {x};
     exp = a**x**b+c**x**x**d;
     p = NCToNCPolynomial[exp, vars];
     NCTest[
       Check[NCPToNCSylvester[p];
	     True
	     ,
	     False
	     ,
	     NCSylvester::NotLinear
       ], False];

     ,
     NCSylvester::NotLinear
   ];


   (* Ignore higher order terms *)

   vars = {x,y};
   exp = 2 + a**x**b + c**x**d + y + x**x + x**y;
   p = NCToNCPolynomial[exp, vars];
   answer = {2, 
             <|x->{{a,c},{b,d},SparseArray[{{1,0},{0,1}}]},
               y->{{1},{1},SparseArray[{{1}}]}|>};
   NCTest[NCPToNCSylvester[p, False], answer];
   NCTest[ExpandNonCommutativeMultiply[
            NCPolynomialToNC[ 
              NCSylvesterToNCPolynomial[answer]]],
           2 + a**x**b + c**x**d + y];

   (* Matrix of polynomials *)

   vars = {x};
   mat = {{a**x+x**a,b**x},{x**b,1}};
   p = NCToNCPolynomial[mat, vars];
   exp = NCPToNCSylvester[p];
   answer = {SparseArray[{{0, 0}, {0, 1}}], 
             <|x->{{1, a, b}, {1, a, b}, 
                   SparseArray[{{0, 0, 1, 0, 0, 0}, 
                                {0, 0, 0, 0, 1, 0},  
    		                {1, 0, 0, 0, 0, 0},  
		                {0, 0, 0, 0, 0, 0}, 
		                {0, 1, 0, 0, 0, 0}, 
		                {0, 0, 0, 0, 0, 0}}]}|>};
    NCTest[exp, answer];
    NCTest[NCPolynomialToNC[NCSylvesterToNCPolynomial[exp]], mat];

    vars = {x};
    mat = {{a**x+x**a+c**y+y**c,b**x},{x**b,1}};
    p = NCToNCPolynomial[mat, vars];
    exp = NCPToNCSylvester[p];
    answer = {SparseArray[{{c**y+y**c, 0}, {0, 1}}], 
              <|x->{{1, a, b}, {1, a, b}, 
                    SparseArray[{{0, 0, 1, 0, 0, 0}, 
                                 {0, 0, 0, 0, 1, 0},   
     		                 {1, 0, 0, 0, 0, 0},  
		                 {0, 0, 0, 0, 0, 0}, 
		                 {0, 1, 0, 0, 0, 0}, 
		                 {0, 0, 0, 0, 0, 0}}]}|>};
    NCTest[exp, answer];
    NCTest[NCPolynomialToNC[NCSylvesterToNCPolynomial[exp]], mat];

    vars = {x,y};
    mat = {{a**x+x**a+c**y+y**c,b**x},{x**b,1}};
    p = NCToNCPolynomial[mat, vars];
    exp = NCPToNCSylvester[p];
    answer = {SparseArray[{{0, 0}, {0, 1}}], 
              <|x->{{1, a, b}, {1, a, b}, 
                    SparseArray[{{0, 0, 1, 0, 0, 0}, 
                                 {0, 0, 0, 0, 1, 0},   
  		                 {1, 0, 0, 0, 0, 0},  
		                 {0, 0, 0, 0, 0, 0}, 
		                 {0, 1, 0, 0, 0, 0}, 
		                 {0, 0, 0, 0, 0, 0}}]},
                y->{{1, c}, {1, c}, 
                    SparseArray[{{0, 0, 1, 0},
                                 {0, 0, 0, 0},  
  		                 {1, 0, 0, 0}, 
		                 {0, 0, 0, 0}}]}|>};
    NCTest[exp, answer];
    NCTest[NCPolynomialToNC[NCSylvesterToNCPolynomial[exp]], mat];

    vars = {x};
    mat = NCMatrixExpand[{{a**e+b},{b}}**{{x}}**{{2 c-d,d}}];
    p = NCToNCPolynomial[mat, vars];
    exp = NCPToNCSylvester[p];
    answer = {SparseArray[{{0, 0}, {0, 0}}], 
              <|x->{{b, a**e}, {c, d}, 
                    SparseArray[{{2, 0, -1, 1}, 
                                 {2, 0, -1, 1},   
  		                 {2, 0, -1, 1},  
		                 {0, 0, 0, 0}}]}|>};
    NCTest[exp, answer];
    NCTest[NCPolynomialToNC[NCSylvesterToNCPolynomial[exp]], mat];

    vars = {x,y,w,z};
    mat = NCMatrixExpand[{{a**e+b,c},{-(a**e+b),b}}**{{x,y},{w,z}}**{{2 c-d,-d},{b,c+d}}];
    p = NCToNCPolynomial[mat, vars];
    exp = NCPToNCSylvester[p];
    answer = {SparseArray[{{0, 0}, {0, 0}}], 
              <|x->{{b, a**e}, {c, d}, 
                    SparseArray[{{2, 0, -1, -1}, 
                                 {-2, 0, 1, 1},   
  		                 {2, 0, -1, -1},  
		                 {-2, 0, 1, 1}}]},
                y->{{b, a**e}, {b, c, d}, 
                    SparseArray[{{1, 0, 0, 1, 0, 1}, 
                                 {-1, 0, 0, -1, 0, -1},   
  		                 {1, 0, 0, 1, 0, 1},  
		                 {-1, 0, 0, -1, 0, -1}}]},
                w->{{b, c}, {c, d}, 
                    SparseArray[{{0, 0, 0, 0}, 
                                 {2, 0, -1, -1},
				 {2, 0, -1, -1},
				 {0, 0, 0, 0}}]},
                z->{{b, c}, {b, c, d}, 
                    SparseArray[{{0, 0, 0, 0, 0, 0}, 
                                 {1, 0, 0, 1, 0, 1},
				 {1, 0, 0, 1, 0, 1},
				 {0, 0, 0, 0, 0, 0}}]}|>
             };
    NCTest[exp, answer];
    NCTest[ExpandNonCommutativeMultiply[
             NCPolynomialToNC[
               NCSylvesterToNCPolynomial[exp]]-mat], 
           {{0,0},{0,0}}];

    answer = {SparseArray[{{0, 0}, {0, 0}}], 
              <|{{x, y}, {w, z}} -> {{b, c, a ** e}, 
                                     {b, c, d}, 
                                     {{SparseArray[{
                                         {0, 0, 2, 0, -1, -1}, 
           				 {0, 0, -2, 0, 1, 1}, 
					 {0, 0, 0, 0, 0, 0}, 
					 {0, 0, 0, 0, 0, 0}, 
					 {0, 0, 2, 0, -1, -1}, 
					 {0, 0, -2, 0, 1, 1}}], 
					 SparseArray[{
					    {1, 0, 0, 1, 0, 1}, 
					    {-1, 0, 0, -1, 0, -1}, 
					    {0, 0, 0, 0, 0, 0}, 
					    {0, 0, 0, 0, 0, 0}, 
					    {1, 0, 0, 1, 0, 1}, 
					    {-1, 0, 0, -1, 0, -1}}]},
				      {SparseArray[{
				         {0, 0, 0, 0, 0, 0}, 
					 {0, 0, 2, 0, -1, -1}, 
					 {0, 0, 2, 0, -1, -1},
					 {0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0},
					 {0, 0, 0, 0, 0, 0}}], 
					 SparseArray[{
					    {0, 0, 0, 0, 0, 0},
					    {1, 0, 0, 1, 0, 1},
					    {1, 0, 0, 1, 0, 1},
					    {0, 0, 0, 0, 0, 0},
					    {0, 0, 0, 0, 0, 0},
					    {0, 0, 0, 0, 0, 0}}]}}}|>
             };
    exp = NCSylvesterCollectOnVars[exp, {{{x,y},{w,z}}}];
    NCTest[exp, answer];
    answer = NCPolynomial[SparseArray[{{0, 0}, {0, 0}}], 
                          <|{{{x, y}, {w, z}}} -> {
			  	  {1, {{b + a ** e, c}, {-b - a ** e, b}}, 
				      {{2 c - d, -d}, {b, c + d}}}}|>, 
			  {{{x, y}, {w, z}}}];
    p = NCSylvesterToNCPolynomial[exp];
    NCTest[p, answer];
    NCTest[NCPolynomialToNC[p], mat];

    Quiet[

      (* SDP Tests *)
      vars = {x};
      mat = a ** x + x ** tp[a] + 1;
      {isSym, symList} = NCSymmetricTest[mat];
      NCTest[isSym, True];
      NCTest[symList, {x}];

      ,

      NCSymmetricQ::SymmetricVariables

    ];
    
    (*
    p = NCToNCPolynomial[mat, vars];
    exp = NCPToNCSylvester[p];
    Print[NCPolynomialToNC[NCSylvesterToNCPolynomial[exp]]];
    *)

];
