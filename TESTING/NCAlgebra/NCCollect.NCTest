<< NCCollect`

Module[
   {exp, answer, tmp,
   a,b,c,d,e,f,g,h,j,k,m,x,y,z,w,A,B,C},

   SetNonCommutative[a,b,c,d,e,f,g,h,j,k,m,x,y,z,w];
   SetCommutative[A,B,C];

   exp = (a - b);
   NCTest[NCCollect`Private`IsFirstNegative[exp], False];

   exp = (-a + b);
   NCTest[NCCollect`Private`IsFirstNegative[exp], True];

   exp = x**y + x;
   answer = x**(1+y);
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = A x**y + B x;
   answer = x**(B + A y);
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = A Subscript[x,1]**y + B Subscript[x,1];
   answer = Subscript[x,1]**(B + A y);
   NCTest[NCStrongCollect[exp,Subscript[x,1]], answer];
   NCTest[NCStrongCollect[exp,{Subscript[x,1]}], answer];
   NCTest[NCCollect[exp,Subscript[x,1]], answer];
   NCTest[NCCollect[exp,{Subscript[x,1]}], answer];
   
   exp = y**x + x;
   answer = (1+y)**x;
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = A y**x + B x;
   answer = (B + A y)**x;
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = A x**y + B x**y;
   answer = (A + B) x**y;
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = y**x**y + x**y;
   answer = (1 + y) ** x**y;
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = A y**x**y + B x**y;
   answer = (B + A y) ** x**y;
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = y**x**y + y**x;
   answer = y**x**(1 + y);
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = A y**x**y + B y**x;
   answer = y**x**(B + A y);
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   exp = x^2**y + y**x^2 + y**x**y + x**y**x;
   answer = x**(x**y + y**x) + y**x**(x + y);
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];

   answer = x**(x**y + y**x) + y**x^2 + y**x**y;
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   answer = x^2**y + y**(x^2 + x**y) + x**y**x;
   NCTest[NCStrongCollect[exp,y], answer];
   NCTest[NCStrongCollect[exp,{y}], answer];

   answer = x^2**y + y**x^2 + y**x**y + x**y**x;
   NCTest[NCCollect[exp,y], answer];
   NCTest[NCCollect[exp,{y}], answer];

   exp = x^2**y + y**x^2 + y**x**y + x**y^2;
   answer = x**(x**y + y^2) + y**x**(x + y);
   NCTest[NCStrongCollect[exp,x], answer];
   NCTest[NCStrongCollect[exp,{x}], answer];

   answer = x^2**y + y**x^2 + y**x**y + x**y^2;
   NCTest[NCCollect[exp,x], answer];
   NCTest[NCCollect[exp,{x}], answer];

   answer = x**(x + y)**y + y**x**(x + y);
   NCTest[NCStrongCollect[exp,{x,y}], answer];

   answer = x^2**y + y**x^2 + (y**x + x**y)**y;
   NCTest[NCCollect[exp,{x,y}], answer];

   answer = y**(x^2 + x**y) + (x^2 + x**y)**y;
   NCTest[NCStrongCollect[exp,y], answer];
   NCTest[NCStrongCollect[exp,{y}], answer];

   answer = x^2**y + y**x^2 + (y**x + x**y)**y;
   NCTest[NCCollect[exp,{y}], answer];

   answer = x**(x + y)**y + y**x**(x + y);
   NCTest[NCStrongCollect[exp,{y,x}], answer];

   answer = x^2**y + y**x^2 + (y**x + x**y)**y;
   NCTest[NCCollect[exp,{y,x}], answer];


   (* NCDecompose *)

   exp = x^2**y + y**x^2 + y**x**y + x**y**x;
   answer = <|{2}->x^2**y + x**y**x + y**x^2,
              {1}->y**x**y|>;
   tmp = NCDecompose[exp,{x}];
   NCTest[tmp, answer];
   NCTest[NCCompose[tmp], exp];
   NCTest[NCCompose[tmp, {1}], y**x**y];
   NCTest[NCCompose[tmp, {2}], x^2**y + x**y**x + y**x^2];

   answer = <|{2,1}->x^2**y + x**y**x + y**x^2,
              {1,2}->y**x**y|>;
   tmp = NCDecompose[exp,{x,y}];
   NCTest[tmp, answer];
   NCTest[NCCompose[tmp], exp];
   NCTest[NCCompose[tmp, {1,2}], y**x**y];
   NCTest[NCCompose[tmp, {2,1}], x^2**y + x**y**x + y**x^2];

   exp = y**x**inv[1+x] + y**x^2 + y**x**y + x**y**inv[1+x];
   answer = <|{2,0}->y**x^2,
              {1,1}->y**x**inv[1+x] + x**y**inv[1+x],
              {1,0}->y**x**y|>;
   tmp = NCDecompose[exp,{x}];
   NCTest[tmp, answer];

   NCTest[NCCompose[tmp], exp];
   NCTest[NCCompose[tmp, {1,0}], y**x**y];
   NCTest[NCCompose[tmp, {2,0}], y**x^2];
   NCTest[NCCompose[tmp, {1,1}], y**x**inv[1+x] + x**y**inv[1+x]];

   (* NCCollect with rationals *)
   exp = y**x**inv[1+x] + y^2**x + y^2**x**y + x**y**inv[1+x];
   answer = (x**y + y**x)**inv[1 + x] + y^2**x**(1 + y);
   NCTest[NCCollect[exp, {x}], answer];

   (* tp *)

   exp = tp[a]**b +tp[a]**c;
   answer = tp[a]**(b+c);
   NCTest[NCStrongCollect[exp,tp[a]], answer];
   NCTest[NCStrongCollectSymmetric[exp,a], answer];
   NCTest[NCCollect[exp,tp[a]], answer];

   exp = tp[a]**b +tp[a]**c;
   NCTest[NCStrongCollect[exp,a], exp];
   NCTest[NCStrongCollectSymmetric[exp,a], answer];
   NCTest[NCCollect[exp,a], exp];

   exp = ExpandNonCommutativeMultiply[tp[a]**(b +c)];
   answer = tp[a]**(b+c);
   NCTest[NCStrongCollect[exp,tp[a]], answer];
   NCTest[NCStrongCollectSymmetric[exp,a], answer];
   NCTest[NCCollect[exp,tp[a]], answer];

   exp = ExpandNonCommutativeMultiply[tp[a]**(b +c)];
   answer = tp[a]**(b+c);
   NCTest[NCStrongCollect[exp,tp[a]], answer];
   NCTest[NCStrongCollectSymmetric[exp,a], answer];
   NCTest[NCCollect[exp,tp[a]], answer];

   exp = tp[a]**b + tp[a]**c + a**b + a**c;
   answer = tp[a]**(b+c) + a**b + a**c;
   NCTest[NCStrongCollect[exp,tp[a]], answer];
   NCTest[NCCollect[exp,tp[a]], answer];

   exp = tp[a]**b +tp[a]**c+b**tp[a**a]+c**tp[a**a];
   answer = tp[a]**(b+c) + (b+c)**tp[a**a];
   NCTest[NCStrongCollect[exp,tp[a]], answer];
   NCTest[NCStrongCollectSymmetric[exp,a], answer];
   NCTest[NCCollect[exp,tp[a]], answer];

   exp = tp[a]**b +tp[a]**c+tp[a]**b**tp[a]+c**tp[a**a];
   answer = tp[a]**(b+c+b**tp[a]) + c**tp[a**a];
   NCTest[NCStrongCollect[exp,tp[a]], answer];
   NCTest[NCStrongCollectSymmetric[exp,a], answer];

   answer = tp[a]**(b+c) + (tp[a]**b + c**tp[a])**tp[a];
   NCTest[NCCollect[exp,tp[a]], answer];

   (* aj *)

   exp = aj[a]**b +aj[a]**c;
   answer = aj[a]**(b+c);
   NCTest[NCStrongCollect[exp,aj[a]], answer];
   NCTest[NCStrongCollectSelfAdjoint[exp,a], answer];

   exp = ExpandNonCommutativeMultiply[aj[a]**(b +c)];
   answer = aj[a]**(b+c);
   NCTest[NCStrongCollect[exp,aj[a]], answer];
   NCTest[NCStrongCollectSelfAdjoint[exp,a], answer];

   exp = ExpandNonCommutativeMultiply[aj[a]**(b +c)];
   answer = aj[a]**(b+c);
   NCTest[NCStrongCollect[exp,aj[a]], answer];
   NCTest[NCStrongCollectSelfAdjoint[exp,a], answer];

   (* aj and tp *)

   exp = aj[a]**b + aj[a]**c + b**tp[d] + d**tp[d];
   answer = aj[a]**(b+c) + (b+d)**tp[d];
   NCTest[NCStrongCollectSelfAdjoint[exp,{a,d}], answer];

   (* Collect on expressions *)

   exp = tp[a]**b**c +tp[a]**b**d;
   answer = tp[a]**b**(c+d);
   NCTest[NCStrongCollect[exp,tp[a]**b], answer];
   NCTest[NCStrongCollectSymmetric[exp,tp[b]**a], answer];
   NCTest[NCCollect[exp,tp[a]**b], answer];

   (* Original tests *)

   exp = a**b-a**c-a**d;
   answer = a**(b-c-d);
   NCTest[NCStrongCollect[exp,{a}], answer];

   exp = -(a**b-a**c-a**d);
   answer = -a**(b-c-d);
   NCTest[NCStrongCollect[exp,{a}], answer];

   exp = a**b-y**c-a**d;
   answer = a**(b-d)-y**c;
   NCTest[NCStrongCollect[exp,a], answer];

   exp = -j ** b - c ** d ** inv[a] ** b - j ** inv[tp[a]] ** tp[d] ** c + 
     inv[e] ** f ** inv[g] ** h + inv[e] ** f ** tp[f] ** c + 
     tp[h] ** inv[tp[g]] ** inv[g] ** h + tp[h] ** inv[tp[g]] ** tp[f] ** c - 
     c ** d ** inv[a] ** inv[tp[a]] ** tp[d] ** c;
   answer = -c ** (d ** inv[a] ** b + d ** inv[a] ** inv[tp[a]] ** tp[d] ** c) -
     j ** b + (- j ** inv[tp[a]] ** tp[d] + inv[e] ** f ** tp[f] +
     tp[h] ** inv[tp[g]] ** tp[f]) ** c + inv[e] ** f ** inv[g] ** h +
     tp[h] ** inv[tp[g]] ** inv[g] ** h;
   NCTest[NCStrongCollect[exp,{c}], answer];

   expr = -c ** a ** tp[a] ** e + c ** a ** tp[a] ** g ** d ** h + 
          h ** f ** g ** a ** tp[a] ** e - 
          h ** f ** g ** a ** tp[a] ** g ** d ** h;
   answer = -(c - h ** f ** g) ** a ** (tp[a] ** e - tp[a] ** g ** d ** h);
   NCTest[NCStrongCollect[expr, a], answer];

   answer = -(c - h ** f ** g) ** a ** tp[a] ** (e - g ** d ** h);
   NCTest[NCStrongCollect[expr, {a,tp[a]}], answer];

   (* NCTermsOfDegree *)
   expr = z + x**y**x + x**w - x^2**y;
   NCTest[NCTermsOfDegree[expr,{x,y},{2,1}], x**y**x - x^2**y];
   NCTest[NCTermsOfDegree[expr,{x,y},{1,0}], x**w];
   NCTest[NCTermsOfDegree[expr,{x,y},{2,2}], 0];
   NCTest[NCTermsOfDegree[expr,{x,y},{0,0}], z];

   (* NCTermsOfTotalDegree *)
   expr = z + x**y**x + x**w - x^2**y;
   NCTest[NCTermsOfTotalDegree[expr,{x,y},3], x**y**x - x^2**y];
   NCTest[NCTermsOfTotalDegree[expr,{x,y},1], x**w];
   NCTest[NCTermsOfTotalDegree[expr,{x,y},2], 0];
   NCTest[NCTermsOfTotalDegree[expr,{x,y},0], z];

   (* NCTermsOfDegree *)
   expr = z + Subscript[x,1]**y**Subscript[x,1] + Subscript[x,1]**w - Subscript[x,1]**Subscript[x,1]**y;
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1],y},{2,1}], Subscript[x,1]**y**Subscript[x,1] - Subscript[x,1]**Subscript[x,1]**y];
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1],y},{1,0}], Subscript[x,1]**w];
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1],y},{2,2}], 0];
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1],y},{0,0}], z];

   (* NCTermsOfTotalDegree *)
   expr = z + Subscript[x,1]**y**Subscript[x,1] + Subscript[x,1]**w - Subscript[x,1]**Subscript[x,1]**y;
   NCTest[NCTermsOfTotalDegree[expr,{Subscript[x,1],y},3], Subscript[x,1]**y**Subscript[x,1] - Subscript[x,1]**Subscript[x,1]**y];
   NCTest[NCTermsOfTotalDegree[expr,{Subscript[x,1],y},1], Subscript[x,1]**w];
   NCTest[NCTermsOfTotalDegree[expr,{Subscript[x,1],y},2], 0];
   NCTest[NCTermsOfTotalDegree[expr,{Subscript[x,1],y},0], z];

   (* NCTermsOfDegree *)
   expr = z + x**y**x + x**w - x^2**y;
   NCTest[NCTermsOfDegree[expr,{x},{2}], x**y**x - x^2**y];
   NCTest[NCTermsOfDegree[expr,{x},{1}], x**w];
   NCTest[NCTermsOfDegree[expr,{x},{3}], 0];
   NCTest[NCTermsOfDegree[expr,{x},{0}], z];

   (* NCTermsOfDegree *)
   expr = z + x**y**x + x**w - x^2**y;
   NCTest[NCTermsOfDegree[expr,x,2], x**y**x - x^2**y];
   NCTest[NCTermsOfDegree[expr,x,1], x**w];
   NCTest[NCTermsOfDegree[expr,x,3], 0];
   NCTest[NCTermsOfDegree[expr,x,0], z];

   (* NCTermsOfTotalDegree *)
   expr = z + x**y**x + x**w - x^2**y;
   NCTest[NCTermsOfTotalDegree[expr,x,2], x**y**x - x^2**y];
   NCTest[NCTermsOfTotalDegree[expr,x,1], x**w];
   NCTest[NCTermsOfTotalDegree[expr,x,3], 0];
   NCTest[NCTermsOfTotalDegree[expr,x,0], z];
  
   (* NCTermsOfDegree *)
   expr = z + Subscript[x,1]**y**Subscript[x,1] + Subscript[x,1]**w - Subscript[x,1]**Subscript[x,1]**y;
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1]},{2}], Subscript[x,1]**y**Subscript[x,1] - Subscript[x,1]**Subscript[x,1]**y];
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1]},{1}], Subscript[x,1]**w];
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1]},{3}], 0];
   NCTest[NCTermsOfDegree[expr,{Subscript[x,1]},{0}], z];

   (* NCTermsOfDegree *)
   expr = z + Subscript[x,1]**y**Subscript[x,1] + Subscript[x,1]**w - Subscript[x,1]**Subscript[x,1]**y;
   NCTest[NCTermsOfDegree[expr,Subscript[x,1],2], Subscript[x,1]**y**Subscript[x,1] - Subscript[x,1]**Subscript[x,1]**y];
   NCTest[NCTermsOfDegree[expr,Subscript[x,1],1], Subscript[x,1]**w];
   NCTest[NCTermsOfDegree[expr,Subscript[x,1],3], 0];
   NCTest[NCTermsOfDegree[expr,Subscript[x,1],0], z];
  
   (* NCTermsOfTotalDegree *)
   expr = z + Subscript[x,1]**y**Subscript[x,1] + Subscript[x,1]**w - Subscript[x,1]**Subscript[x,1]**y;
   NCTest[NCTermsOfTotalDegree[expr,Subscript[x,1],2], Subscript[x,1]**y**Subscript[x,1] - Subscript[x,1]**Subscript[x,1]**y];
   NCTest[NCTermsOfTotalDegree[expr,Subscript[x,1],1], Subscript[x,1]**w];
   NCTest[NCTermsOfTotalDegree[expr,Subscript[x,1],3], 0];
   NCTest[NCTermsOfTotalDegree[expr,Subscript[x,1],0], z];
  
   (* Bill's tests *)
   expr = ExpandNonCommutativeMultiply[tp[a**x+y]**k**(a**x+y) + tp[a**x+y]**m**(a**x+y)];
   answer = tp[a**x+y]**k**(a**x+y) + tp[a**x+y]**m**(a**x+y);
   NCTest[NCCollect[expr, {k,m}], answer];

   (* Invalid expression *)
   NCTestCheck[NCCollect[A (x**y(x - y) + (y - x)**x), {x,y}],
               NCCollect::NotPolynomial];

   (* NCCollect ByTotalDegree *)
   expr = ExpandNonCommutativeMultiply[A (x**y**(x - y) + (y - x)**x)];
   answer = -(A x - A y) ** x + x ** y ** (A x - A y);
   NCTest[NCCollect[expr, {x,y}, ByTotalDegree -> True], answer];

   answer = A x**y**(x - y) - A (x - y)**x;
   NCTest[NCCollect[expr, {x,y,A}, ByTotalDegree -> True], answer];

   answer = A (-x ** ((1 - y) ** x + y ** y) + y ** x);
   NCTest[NCStrongCollect[expr, {x,y,A}], answer];

   (* Print["-------------------> " <> ToString[NCTest`Private`NCTestCounter]]; *)

];
