Block[
  {k,i,j,
   exp1,exp2,
   pattern1,pattern2,pattern3,pattern4,
   zz,yy,
   x,y,z,b},

  (* History:  Nov 2015: CommutativeQ test (mauricio) *)

  (* Test SNC *)

  SetNonCommutative[x,y,z,b];

  Clear[zz,yy];
  SetNonCommutative[zz];

  NCTest[CommutativeQ[zz], False];
  NCTest[CommutativeQ[yy], True];

  Clear[zz,yy];

  NCTest[CommutativeQ[zz], True];
  NCTest[CommutativeQ[yy], True];

  SetNonCommutative[zz];

  NCTest[CommutativeQ[zz], False];
  NCTest[CommutativeQ[yy], True];

  NCTest[CommutativeQ[zz[1]], False];
  NCTest[CommutativeQ[zz[zz]], False];
  NCTest[CommutativeQ[zz[yy]], False];

  NCTest[CommutativeQ[yy[1]], True];
  NCTest[CommutativeQ[yy[yy]], True];
  NCTest[CommutativeQ[yy[zz]], False];

  NCTest[CommutativeQ[yy[1,yy]], True];
  NCTest[CommutativeQ[yy[1,zz]], False];

  Clear[zz,yy];

  (* Test power *)
  NCTest[CommutativeQ[x], False];
  NCTest[CommutativeQ[y], False];
  NCTest[CommutativeQ[x^2], False];
  NCTest[CommutativeQ[x^2**y], False];
  NCTest[CommutativeQ[y**x^2**y], False];
  NCTest[CommutativeQ[(x**y)^2], False];

  NCTest[CommutativeQ[x^(-1)], False];
  NCTest[CommutativeQ[x^(-1)**y], False];
  NCTest[CommutativeQ[y**x^(-1)**y], False];
  NCTest[CommutativeQ[(x**y)^-1], False];

  (* Test rule *)

  Clear[zz];
  SetNonCommutative[zz];

  pattern1=zz_**b_->b**zz;
  exp1=x**y+x**y**z;
  NCTest[(exp1/.pattern1), y**x+x**y**z];

  zz=2;
  exp1=x**y+x**y**z;
  NCTest[(exp1/.pattern1), 2y+x**y**z];

  exp2=y**x+x**y**z;
  NCTest[(exp2/.pattern1), 2x+x**y**z];

  pattern2=_**b_->b;
  NCTest[(exp1/.pattern2), y+x**y**z];
  NCTest[(exp2/.pattern2), x+x**y**z];

  pattern3=__**b_->b;
  NCTest[(exp1/.pattern3), y+z];
  NCTest[(exp2/.pattern3), x+z];

  pattern4=___**b_->b;
  NCTest[(exp1/.pattern4), y+z];
  NCTest[(exp2/.pattern4), x+z];

  Clear[zz];

  (* Test delayed rule *)

  Clear[zz];
  SNC[zz];

  pattern1=zz_**b_:>b**zz;
  exp1=x**y+x**y**z;
  NCTest[(exp1/.pattern1), y**x+x**y**z];

  zz=2;
  exp1=x**y+x**y**z;
  NCTest[(exp1/.pattern1), y**x+x**y**z];

  exp2=y**x+x**y**z;
  NCTest[(exp2/.pattern1), x**y+x**y**z];

  pattern2=_**b_:>b;
  NCTest[(exp1/.pattern2), y+x**y**z];
  NCTest[(exp2/.pattern2), x+x**y**z];

  pattern3=__**b_:>b;
  NCTest[(exp1/.pattern3), y+z];
  NCTest[(exp2/.pattern3), x+z];

  pattern4=___**b_:>b;
  NCTest[(exp1/.pattern4), y+z];
  NCTest[(exp2/.pattern4), x+z];

  Clear[zz];

  (* Test exceptions *)
  
  NCTestCheck[SetNonCommutative[1],
              CommutativeQ::NonCommutative];
  NCTestCheck[SetNonCommutative[Subscript[zz,1]],
              CommutativeQ::NonCommutativeSubscript];
  NCTestCheck[SetNonCommutative[f[x]],
              CommutativeQ::NonCommutative];
  NCTestCheck[SetNonCommutative[x + y],
              CommutativeQ::NonCommutative];

  NCTestCheck[SetCommutative[1],
              CommutativeQ::Commutative];
  NCTestCheck[SetCommutative[Subscript[zz,1]],
              CommutativeQ::CommutativeSubscript];
  NCTestCheck[SetCommutative[f[x]],
              CommutativeQ::Commutative];
  NCTestCheck[SetCommutative[x + y],
              CommutativeQ::Commutative];

  (* Test subscripts *)
  SetNonCommutative[zz];

  NCTest[NonCommutativeQ[zz], True];
  NCTest[NonCommutativeQ[Subscript[zz,1]], True];
  NCTest[NonCommutativeQ[Subscript[zz,1,2]], True];
  NCTest[NonCommutativeQ[Subscript[zz,x]], True];

  SetCommutative[zz];

  NCTest[CommutativeQ[zz], True];
  NCTest[CommutativeQ[Subscript[zz,1]], True];
  NCTest[CommutativeQ[Subscript[zz,1,2]], True];
  NCTest[CommutativeQ[Subscript[zz,x]], True];

  Clear[zz];

  (* Test functions *)
  SetNonCommutative[x, y];
  SetCommutative[b];
  NCTest[CommutativeQ[b[y]], False];
  NCTest[CommutativeQ[b[y,x]], False];
  NCTest[CommutativeQ[b[b,x]], False];
  NCTest[CommutativeQ[b[b,b]], True];
  NCTest[CommutativeQ[x[b,b]], False];
  NCTest[CommutativeQ[x[y]], False];

  SetCommutativeFunction[x];
  NCTest[CommutativeQ[x[y]], True];

  (* Protected Symbols *)
  NCTestCheck[SetNonCommutative[E], SetNonCommutative::Protected];
  NCTest[CommutativeQ[E], False];

  NCTestCheck[SetCommutative[E], SetCommutative::Protected];
  NCTest[CommutativeQ[E], True];

  NCTest[CommutativeQ[Tr[x]], False];
  NCTestCheck[SetCommutativeFunction[Tr], SetCommutative::Protected];
  NCTest[CommutativeQ[Tr[x]], True];

  (* Test SetNonCommutativeHold *)
  b = 1;
  NCTestCheck[SetCommutative[b], CommutativeQ::Commutative];
  NCTest[CommutativeQ[b], True];
  SetCommutativeHold[b];
  NCTest[CommutativeQ[b], True];

  NCTestCheck[SetNonCommutative[b], CommutativeQ::NonCommutative];
  NCTest[CommutativeQ[b], True];
  SetNonCommutativeHold[b];
  NCTest[CommutativeQ[b], True];
  
];