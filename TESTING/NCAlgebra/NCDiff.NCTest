(* :Title: 	Diff.NCTest *)

(* :Author: 	mauricio *)

<< NCDiff`

Module[ 
   {test,answer,exp,result,vars,A,B,F,G,a,b,c,d,e,f,g,
    x,w,y,h,s,k,z},

   SetCommutative[A,B,F,G];
   SetNonCommutative[a,b,c,d,e,f,g,x,w,y,h,s,k,z];

   exp = 1;
   answer = 0;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = y;
   answer = 0;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = A + 2 B ** y;
   answer = 0;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x;
   answer = h;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = tp[x];
   answer = tp[h];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = tp[x**x];
   answer = tp[h**x+x**h];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = aj[x];
   answer = aj[h];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = aj[x**x];
   answer = aj[h**x+x**h];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**y**x;
   answer = h**y**x+x**y**h;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = y**x**y;
   answer = y**h**y;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**y**x+y**x**y;
   answer = h**y**x+x**y**h+y**h**y;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = A**x**y**x+B**y**x**y;
   answer = A h**y**x + A x**y**h + B y**h**y;
   NCTest[ExpandNonCommutativeMultiply[DirectionalD[exp, x, h]], answer];

   exp = A**tp[x]**y**x+B**y**x**y;
   answer = A tp[h]**y**x + A tp[x]**y**h + B y**h**y;
   NCTest[ExpandNonCommutativeMultiply[DirectionalD[exp, x, h]], answer];

   exp = A**aj[x]**y**x+B**y**x**y;
   answer = A aj[h]**y**x + A aj[x]**y**h + B y**h**y;
   NCTest[ExpandNonCommutativeMultiply[DirectionalD[exp, x, h]], answer];

   exp = inv[x];
   answer = -inv[x]**h**inv[x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[x**x];
   answer = - inv[x**x]**(h**x+x**h)**inv[x**x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[tp[x]];
   answer = - inv[tp[x]]**tp[h]**inv[tp[x]];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[1 + tp[x]];
   answer = - inv[1+tp[x]]**tp[h]**inv[1+tp[x]];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[1+x];
   answer = -inv[1+x]**h**inv[1+x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = 1+inv[1+x];
   answer = -inv[1+x]**h**inv[1+x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**inv[1+x];
   answer = h**inv[1+x]-x**inv[1+x]**h**inv[1+x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[1+x]**x;
   answer = inv[1+x]**h-inv[1+x]**h**inv[1+x]**x;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**inv[1+x]**x;
   answer = x**inv[1+x]**h+h**inv[1+x]**x-x**inv[1+x]**h**inv[1+x]**x;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**x+inv[1+x**x];
   answer = (h**x+x**h)-inv[1+x**x]**(h**x+x**h)**inv[1+x**x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = 1+inv[1+inv[1 + x]];
   answer = inv[1+inv[1 + x]]**inv[1+x]**h**inv[1+x]**inv[1+inv[1 + x]];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[A x];
   answer = -inv[x]**h**inv[x]/A;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[A x**x];
   answer = - inv[x**x]**(h**x+x**h)**inv[x**x]/A;
   NCTest[ExpandNonCommutativeMultiply[DirectionalD[exp, x, h]], ExpandNonCommutativeMultiply[answer]];

   exp = inv[tp[A x]];
   answer = - inv[tp[x]]**tp[h]**inv[tp[x]]/A;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[1 + A x];
   answer = - inv[1+A x]**h**inv[1+A x]*A;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[1 + A tp[x]];
   answer = - inv[1+A tp[x]]**tp[h]**inv[1+A tp[x]]*A;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**inv[1+ A x];
   answer = h**inv[1+A x] - A x**inv[1+A x]**h**inv[1+A x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[1+A x]**x;
   answer = inv[1+A x]**h - A inv[1+A x]**h**inv[1+A x]**x;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**inv[1+A x]**x;
   answer = x**inv[1+A x]**h+h**inv[1+A x]**x-A x**inv[1+A x]**h**inv[1+A x]**x;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**inv[B+ A tp[x]];
   answer = h**inv[B+A tp[x]] - A x**inv[B+A tp[x]]**tp[h]**inv[B+A tp[x]];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = inv[B+A x]**x;
   answer = inv[B+A x]**h - A inv[B+A x]**h**inv[B+A x]**x;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**inv[1+A x]**x;
   answer = x**inv[1+A x]**h+h**inv[1+A x]**x-A x**inv[1+A x]**h**inv[1+A x]**x;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = 1+inv[1+ A x];
   answer = -inv[1+A x]**h**inv[1+A x]*A;
   NCTest[DirectionalD[exp, x, h], answer];

   exp = x**x+inv[1+x**x];
   answer = (h**x+x**h)-inv[1+x**x]**(h**x+x**h)**inv[1+x**x];
   NCTest[DirectionalD[exp, x, h], answer];

   exp = 1+inv[1+inv[1 + A x]];
   answer = inv[1+inv[1 + A x]]**inv[1+A x]**h**inv[1+A x]**inv[1+inv[1 + A x]] * A;
   NCTest[DirectionalD[exp, x, h], answer];

   (* NCDirectionalD *)

   exp = A**x**y**x + B**y**x**y;
   answer = A h**y**x + A x**y**h + B y**h**y;
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}]], answer];
   answer = A y**x + A x**y + B y**y;
   NCTest[NCGrad[exp, x], answer];

   exp = A**x**y**x + B**y**x**y;
   answer = A x**s**x + B s**x**y + B y**x**s;
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {y, s}]], answer];
   answer = A x**x + B x**y + B y**x;
   NCTest[NCGrad[exp, y], answer];

   exp = A**x**y**x + B**y**x**y;
   answer = A h**y**x + A x**y**h + B y**h**y
          + A x**s**x + B s**x**y + B y**x**s;
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}, {y, s}]], answer];
   answer = {A y**x + A x**y + B y**y, A x**x + B x**y + B y**x};
   NCTest[NCGrad[exp, x, y], answer];
   
   exp = A**x**y**x + B**a**x**y;
   answer = A h**y**x + A x**y**h + B a**h**y;
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}]], answer];
   answer = A y**x + A x**y + B y**a;
   NCTest[NCGrad[exp, x], answer];

   exp = 1+inv[1+inv[1 + A x]];
   answer = inv[1+inv[1 + A x]]**inv[1+A x]**h**inv[1+A x]**inv[1+inv[1 + A x]] * A;
   NCTest[NCDirectionalD[exp, {x, h}], DirectionalD[exp, x, h]];
   answer = A*inv[1+A x]**inv[1+inv[1 + A x]]**inv[1+inv[1 + A x]]**inv[1+A x];
   NCTest[NCGrad[exp, x], answer];

   exp = A**x**y**x+B**y**x**y;
   answer = A (h**y**x + x**y**h) + B y**h**y + B (s**x**y + y**x**s) 
          + A x**s**x;
   NCTest[NCDirectionalD[exp, {x, h}, {y, s}], ExpandNonCommutativeMultiply[answer]];

   answer = DirectionalD[exp, x, h] + DirectionalD[exp, y, s];
   NCTest[NCDirectionalD[exp, {x, h}, {y, s}], answer];
   answer = ExpandNonCommutativeMultiply[{A (y**x + x**y) + B y**y, B (x**y + y**x) + A x**x}];
   NCTest[NCGrad[exp, x, y], answer];


   (* tp *)

   exp = A**tp[x]**y**x + B**y**x**tp[y];
   answer = A tp[h]**y**x + A tp[x]**y**h + B y**h**tp[y];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}]], answer];
   answer = A tp[y**x] + A tp[x]**y + B tp[y]**y;
   NCTest[NCGrad[exp, x], answer];

   exp = A**tp[x]**y**x + B**y**x**tp[y];
   answer = A tp[x]**s**x + B s**x**tp[y] + B y**x**tp[s];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {y, s}]], answer];
   answer = A x**tp[x] + B x**tp[y] + B tp[y**x];
   NCTest[NCGrad[exp, y], answer];

   exp = A**tp[x]**y**x + B**y**x**tp[y];
   answer = A tp[h]**y**x + A tp[x]**y**h + B y**h**tp[y]
          + A tp[x]**s**x + B s**x**tp[y] + B y**x**tp[s];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}, {y, s}]], answer];
   answer = {A tp[y**x] + A tp[x]**y + B tp[y]**y,
             A x**tp[x] + B x**tp[y] + B tp[y**x]};
   NCTest[NCGrad[exp, x, y], answer];

   (* aj *)

   exp = A**aj[x]**y**x + B**y**x**aj[y];
   answer = A aj[h]**y**x + A aj[x]**y**h + B y**h**aj[y];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}]], answer];
   answer = Conjugate[A] aj[y**x] + A aj[x]**y + B aj[y]**y;
   NCTest[NCGrad[exp, x], answer];

   exp = A**aj[x]**y**x + B**y**x**aj[y];
   answer = A aj[x]**s**x + B s**x**aj[y] + B y**x**aj[s];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {y, s}]], answer];
   answer = A x**aj[x] + B x**aj[y] + Conjugate[B] aj[y**x];
   NCTest[NCGrad[exp, y], answer];

   exp = A**aj[x]**y**x + B**y**x**aj[y];
   answer = A aj[h]**y**x + A aj[x]**y**h + B y**h**aj[y]
          + A aj[x]**s**x + B s**x**aj[y] + B y**x**aj[s];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}, {y, s}]], answer];
   answer = {Conjugate[A] aj[y**x] + A aj[x]**y + B aj[y]**y,
             A x**aj[x] + B x**aj[y] + Conjugate[B] aj[y**x]};
   NCTest[NCGrad[exp, x, y], answer];

   (* tp and aj *)

   exp = A**aj[x]**y**x + B**y**x**tp[y];
   answer = A aj[h]**y**x + A aj[x]**y**h + B y**h**tp[y];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}]], answer];
   answer = Conjugate[A] aj[y**x] + A aj[x]**y + B tp[y]**y;
   NCTest[NCGrad[exp, x], answer];

   exp = A**aj[x]**y**x + B**y**x**tp[y];
   answer = A aj[x]**s**x + B s**x**tp[y] + B y**x**tp[s];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {y, s}]], answer];
   answer = A x**aj[x] + B x**tp[y] + B tp[y**x];
   NCTest[NCGrad[exp, y], answer];

   exp = A**aj[x]**y**x + B**y**x**tp[y];
   answer = A aj[h]**y**x + A aj[x]**y**h + B y**h**tp[y]
          + A aj[x]**s**x + B s**x**tp[y] + B y**x**tp[s];
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}, {y, s}]], answer];
   answer = {Conjugate[A] aj[y**x] + A aj[x]**y + B tp[y]**y,
             A x**aj[x] + B x**tp[y] + B tp[y**x]};
   NCTest[NCGrad[exp, x, y], answer];

   (* old NCGrad test
     temp = 2 GE[x] **A[x] - tp[W]**W + tp[C1[x]]**C1[x] +
            2 GE[x]**b**C2[x] + 2 GE[x]**B1[x]**W + GE[x]**b**D21[x]**W;
   *)
   exp = 2 g **a - tp[x]**x + tp[c]**c +
         2 g**b**e + 2 g**d**x + g**b**f**x;
   answer = 2 g**d + g**b**f - 2tp[x];
   NCTest[NCGrad[exp, x], answer ];

   exp = 2 g **a - x**x + tp[c]**c +
         2 g**b**e + 2 g**d**x + g**b**f**x;
   answer = 2 g**d + g**b**f - 2 x;
   NCTest[NCGrad[exp, x], answer ];

   (* Fail gracefully when exp is not rational *)
   
   exp = A**x**Exp[x]**x + B**y**x**y;
   NCTestCheck[NCGrad[exp, x], {NCGrad::Failed,NCPolynomial::NotPolynomial}];

   (* NCHessian *)
   exp = A**x**y**x + B**y**x**y;
   answer = A h**y**h + A h**y**h 
          + A h**s**x + A x**s**h + B s**h**y + B y**h**s
          + A h**s**x + A x**s**h + B s**h**y + B y**h**s
          + B s**x**s + B s**x**s;
   NCTest[ExpandNonCommutativeMultiply[NCHessian[exp, {x, h}, {y, s}]], answer];

   exp = (A + B*x) ** inv[F + G*x] + tp[ (A + B*x) ** inv[F + G*x] ];
   answer = B h ** inv[F + G x] 
   	  - G (A + B x) ** inv[F + G x] ** h ** inv[F + G x] 
          + B inv[F + G*tp[x]] ** tp[h]
          - G inv[F + G*tp[x]] ** tp[h] ** inv[F + G*tp[x]] ** (A + B tp[x]);
   NCTest[ExpandNonCommutativeMultiply[NCDirectionalD[exp, {x, h}]], ExpandNonCommutativeMultiply[answer]];

   exp = (x**x) ** inv[1 + x];
   answer = h**x**inv[1 + x] + x**h**inv[1 + x] - x**x**inv[1+x]**h**inv[1+x];
   NCTest[NCDirectionalD[exp, {x, h}], answer];
   answer = h**h**inv[1 + x] - h**x**inv[1+x]**h**inv[1 + x]
          + h**h**inv[1 + x] - x**h**inv[1 + x]**h**inv[1 + x]
          - h**x**inv[1+x]**h**inv[1+x] - x**h**inv[1+x]**h**inv[1+x]
	  + 2 x**x**inv[1+x]**h**inv[1+x]**h**inv[1+x];
   NCTest[NCHessian[exp, {x, h}], answer];

   exp = (x**x) ** inv[1 + x] + tp[x**x ** inv[1 + x]];
   answer = h**x**inv[1 + x] + x**h**inv[1 + x] - x**x**inv[1+x]**h**inv[1+x]
          + tp[h**x**inv[1 + x] + x**h**inv[1 + x] - x**x**inv[1+x]**h**inv[1+x]];
   NCTest[NCDirectionalD[exp, {x, h}], answer];
   answer = h**h**inv[1 + x] - h**x**inv[1+x]**h**inv[1 + x]
          + h**h**inv[1 + x] - x**h**inv[1 + x]**h**inv[1 + x]
          - h**x**inv[1+x]**h**inv[1+x] - x**h**inv[1+x]**h**inv[1+x]
	  + 2 x**x**inv[1+x]**h**inv[1+x]**h**inv[1+x];
   answer += tp[answer];
   NCTest[NCHessian[exp, {x, h}], answer];

   (* NCIntegrate *)

   expr = tp[x] ** tp[h] + tp[h] ** tp[x];
   vars = {x, h};
   answer = tp[x] ** tp[x];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = tp[h] ** tp[x] + tp[x] ** tp[h];
   vars = Sequence @@ {{x, h}, {y, k}};
   answer = tp[x] ** tp[x];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = h ** k;
   vars = Sequence @@ {{x, h}, {y, k}};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = x ** y + y ** x ** z;
   vars = {x, w};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = -tp[y] ** tp[h] - tp[k] ** tp[x];
   vars = Sequence @@ {{x, h}, {y, k}};
   answer = -tp[y] ** tp[x];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = h ** y + x ** k;
   vars = {x, h};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = h ** x ** y + x ** h ** y;
   vars = {x, h};
   answer = x ** x ** y;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = h ** y + x ** k;
   vars = Sequence @@ {{x, h}, {y, k}};
   answer = x ** y;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = h ** x ** y + x ** h ** y;
   vars = Sequence @@ {{x, h}, {y, k}};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = y ** h + 3 k ** x;
   vars = Sequence @@ {{x, h}, {y, k}, {z, w}};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = 1/3 x ** h + 1/3 h ** x;
   vars = Sequence @@ {{x, h}, {y, k}};
   answer = x ** x/3;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = 0.22 x ** h + 0.22 h ** x;
   vars = {x, h};
   answer = 0.22 x ** x;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = 2 y ** h + k ** x;
   vars = Sequence @@ {{x, h}, {y, k}};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = 2 x ** h +  h ** x;
   vars = Sequence @@ {{x, h}};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   expr = h ** y ** x ** y + x ** k ** x ** y + x ** y ** h ** y + x ** y ** x ** k;
   vars = Sequence @@ {{x, h}, {y, k}};
   answer = x ** y ** x ** y;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = A h ** x + A x ** h;
   vars = {x, h};
   answer = A x ** x;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = a ** h ** x + a ** x ** h;
   vars = {x, h};
   answer = a ** x ** x;
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   expr = x ** h ** y;
   vars = {x, h};
   NCTestCheck[NCIntegrate[expr, vars], $Failed, NCIntegrate::NotIntegrable];

   (* rationals *)

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[x];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[2 x];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + 2 x];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + A x];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + x + x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + 2 x + x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + x + 2 x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + y ** x + x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + A y ** x + B x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   (* tp's *)

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[tp[x]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[2 tp[x]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + 2 tp[x]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + A tp[x]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[tp[x] ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + tp[x] + tp[x] ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + 2 tp[x] + tp[x] ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + tp[x] + 2 tp[x] ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + tp[y] ** tp[x] + tp[x] ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + A tp[y ** x] + B tp[x ** y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   (* mixed tp's *)

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[tp[x] ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + tp[x] + x ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + 2 x + tp[x] ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + tp[x] + 2 tp[x] ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + y ** tp[x] + x ** tp[y]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + A tp[y ** x] + B x ** y];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];

   (* inv of inv *)

   (* COMMENT OUT FOR NOW
   vars = Sequence @@ {{x, h}, {y, k}};
   answer = inv[1 + inv[1 + x]];
   expr = NCDirectionalD[answer, vars];
   result = NCIntegrate[expr, vars];
   NCTest[result, answer];
   *)

];
