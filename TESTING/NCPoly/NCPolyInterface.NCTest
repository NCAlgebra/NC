<< NCOptions`
SetOptions[NCOptions,
           SmallCapSymbolsNonCommutative -> False,
	   ShowBanner -> False];
Quiet[Get["NCAlgebra`"], NCAlgebra`NCAlgebra::NoSymbolsNonCommutative];
<< NCPoly`
<< NCPolyInterface`

Block[
  {a,b,c,d,x,y,
  vars,NCExp,NCExpExp,PolyExp,
  A,B,C,exp1,exp2
  },
  
  (* Test NCAlgebra interface *)

  (* TESTING NCToNCPoly/NCPolyToNC -- BEGIN *)

  SNC[a,b,c,d,x,y];

  (* TESTING NCPolynomial FACILITIES *)

  (* NCCoefficientQ *)
  
  NCTest[NCCoefficientQ[1], True];
  NCTest[NCCoefficientQ[A], True];
  NCTest[NCCoefficientQ[2 A], True];
  NCTest[NCCoefficientQ[1 + A], True];

  NCTest[NCCoefficientQ[x], False];

  NCTest[NCCoefficientQ[1 + x], False];
  NCTest[NCCoefficientQ[x**x], False];
  NCTest[NCCoefficientQ[x**y], False];
  NCTest[NCCoefficientQ[Exp[x]], False];

  NCTest[NCCoefficientQ[Subscript[A,1]], True];
  NCTest[NCCoefficientQ[2 Subscript[A,1]], True];
  NCTest[NCCoefficientQ[1 + Subscript[A,1]], True];

  NCTest[NCCoefficientQ[Subscript[x,1]], False];
  NCTest[NCCoefficientQ[1 + Subscript[x,1]], False];
  NCTest[NCCoefficientQ[Subscript[x,1]**Subscript[x,1]], False];
  NCTest[NCCoefficientQ[Exp[Subscript[x,1]]], False];

  (* NCMonomialQ *)

  NCTest[NCMonomialQ[1], True];
  NCTest[NCMonomialQ[A], True];
  NCTest[NCMonomialQ[x], True];
  NCTest[NCMonomialQ[A x], True];
  NCTest[NCMonomialQ[2 x], True];
  NCTest[NCMonomialQ[2 A x], True];
  NCTest[NCMonomialQ[x ** y], True];
  NCTest[NCMonomialQ[x ** x], True];
  NCTest[NCMonomialQ[x^2 ** y], True];
  NCTest[NCMonomialQ[2 x ** y], True];
  NCTest[NCMonomialQ[A x ** y], True];
  NCTest[NCMonomialQ[A x ** x], True];
  NCTest[NCMonomialQ[A x^2 ** y], True];
  NCTest[NCMonomialQ[2 A x ** y], True];
  NCTest[NCMonomialQ[(1 + A) x], True];

  NCTest[NCMonomialQ[Exp[x]], False];
  NCTest[NCMonomialQ[1 + y], False];
  NCTest[NCMonomialQ[x + y], False];
  NCTest[NCMonomialQ[2 A x ** Exp[x]], False];

  NCTest[NCMonomialQ[2 A x ** (x + y)], False];

  NCTest[NCMonomialQ[Subscript[A,1]], True];
  NCTest[NCMonomialQ[Subscript[x,1]], True];
  NCTest[NCMonomialQ[Subscript[A,1] Subscript[x,1]], True];
  NCTest[NCMonomialQ[2 Subscript[x,1]], True];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1]], True];
  NCTest[NCMonomialQ[Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[Subscript[x,1]^2], True];
  NCTest[NCMonomialQ[Subscript[x,1]^2 ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[2 Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[Subscript[A,1] Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1] ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[2 Subscript[x,1]^2], True];
  NCTest[NCMonomialQ[2 Subscript[x,1]^2 ** Subscript[y,2]], True];
  NCTest[NCMonomialQ[(1 + Subscript[A,1]) Subscript[x,1]], True];

  NCTest[NCMonomialQ[Exp[Subscript[x,1]]], False];
  NCTest[NCMonomialQ[1 + Subscript[y,2]], False];
  NCTest[NCMonomialQ[Subscript[x,1] + Subscript[y,2]], False];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1] ** Exp[Subscript[x,1]]], False];
  NCTest[NCMonomialQ[2 Subscript[A,1] Subscript[x,1] ** (Subscript[x,1] + Subscript[y,2])], False];

  (* NCPolynomialQ *)
  
  NCTest[NCPolynomialQ[1], True];
  NCTest[NCPolynomialQ[A], True];
  NCTest[NCPolynomialQ[x], True];
  NCTest[NCPolynomialQ[A x], True];
  NCTest[NCPolynomialQ[2 x], True];
  NCTest[NCPolynomialQ[2 A x], True];
  NCTest[NCPolynomialQ[x ** y], True];
  NCTest[NCPolynomialQ[2 x ** y], True];
  NCTest[NCPolynomialQ[A x ** y], True];
  NCTest[NCPolynomialQ[2 A x ** y], True];

  NCTest[NCPolynomialQ[1 + x], True];
  NCTest[NCPolynomialQ[A + x], True];
  NCTest[NCPolynomialQ[x + y], True];
  NCTest[NCPolynomialQ[A x + x], True];
  NCTest[NCPolynomialQ[2 x + y], True];
  NCTest[NCPolynomialQ[2 A x - y], True];
  NCTest[NCPolynomialQ[x ** y + y], True];
  NCTest[NCPolynomialQ[2 x ** y - x], True];
  NCTest[NCPolynomialQ[A x ** y - x ** y], True];
  NCTest[NCPolynomialQ[2 A x ** y + x ** y], True];

  NCTest[NCPolynomialQ[(x + y)**x], True];
  NCTest[NCPolynomialQ[1 + (x + y)**x], True];
  NCTest[NCPolynomialQ[A + (x + y)**x], True];
  NCTest[NCPolynomialQ[(x + y)**x - (x - y)^3], True];

  NCTest[NCPolynomialQ[x + Exp[x]], False];

  (* NCToNCPoly *)
  
  vars = {{a},{b,c}};
  NCExp = a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = 2 b;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 2 NCPolyMonomial[{1}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = - c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, -NCPolyMonomial[{2},{1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{1,0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = 5 c ** b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 5 NCPolyMonomial[{2,1,0},{1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = - b ** c ** b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, - NCPolyMonomial[{1,2,1,0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];
  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[NCExp, NCExpExp];

  NCExp = a**a + 2 b**b + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];
  NCTest[PolyExp, NCPoly[{1,2,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{Subscript[b,1],c}};
  NCExp = a**a + Subscript[b,1]**Subscript[b,1] + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];
  
  vars = {{a},{Subscript[b,1],c}};
  NCExp = a**a + alpha * Subscript[b,1] + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  vars = {{a},{b,c}};
  NCExp = a**a -(- b**b - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[(NCExp /. (x_ -> y_) -> x - y), NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a - (- b**b - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[(NCExp /. (x_ == y_) -> x - y), NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c + d**d;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCMonomialToDigits::InvalidSymbol];

  vars = {{a},{b,{c}}};
  NCExp = a**a + b**b + c**c;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::InvalidList];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c +inv[a];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  NCExp = inv[a**a + b**b + c**c];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  NCExp = inv[a]**b;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  (* List functionality *)

  NCExp = { - b ** c ** b ** a, a**a + b**b + c**c };
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, {NCPoly[{-1}, {{b,c,b,a}}, vars], NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]}];
  NCTest[NCExp, NCExpExp];

  (* TESTING NCToNCPoly/NCPolyToNC -- END *)

  (* ** product *)
  vars = {{a},{b,c}};
  A = NCPolyMonomial[{a},vars];
  B = NCPolyMonomial[{b},vars];
  C = NCPolyMonomial[{c},vars];

  NCTest[A, NCPolyMonomial[{0}, {1,2}]];
  NCTest[B, NCPolyMonomial[{1}, {1,2}]];
  NCTest[C, NCPolyMonomial[{2}, {1,2}]];

  NCTest[A**B, NCToNCPoly[a**b, vars]];
  NCTest[A**B**C, NCToNCPoly[a**b**c, vars]];
  NCTest[C**A**B, NCToNCPoly[c**a**b, vars]];

  NCTest[2 A**B, NCToNCPoly[2 a**b, vars]];
  NCTest[3 A**B**C, NCToNCPoly[3 a**b**c, vars]];
  NCTest[4 C**A**B, NCToNCPoly[4 c**a**b, vars]];

  (* tp and aj *)

  (* NCToNCPoly *)
  
  vars = {{a},{tp[a],c}};
  NCExp = a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{0}, {1,2}, TransposePairs -> {{0,1}}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = 2 tp[a];
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 2 NCPolyMonomial[{1}, {1,2}, TransposePairs -> {{0,1}}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = - c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, -NCPolyMonomial[{2},{1,2}, TransposePairs -> {{0,1}}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = tp[a] ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{1,0}, {1,2}, TransposePairs -> {{0,1}}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = 5 c ** tp[a] ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 5 NCPolyMonomial[{2,1,0},{1,2}, TransposePairs -> {{0,1}}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = - tp[a] ** c ** tp[a] ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, - NCPolyMonomial[{1,2,1,0}, {1,2}, TransposePairs -> {{0,1}}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = a**a + tp[a]**tp[a] + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars /. tp[a]->b, TransposePairs -> {{a,b}}]];
  
  NCTest[NCExp, NCExpExp];

  vars = {{a},{tp[b],c}};
  NCExp = a**a + tp[b]**tp[b] + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{tp[b],tp[b]},{c,c}} /. tp[b]->b, vars /. tp[b]->b]];
  
  vars = {{a},{tp[Subscript[b,1]],Subscript[b,1]}};
  NCExp = a**a + tp[Subscript[b,1]]**tp[Subscript[b,1]] + Subscript[b,1]**Subscript[b,1];
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  vars = {{a},{tp[a],c}};
  NCExp = a**a -(- tp[a]**tp[a] - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{tp[a],tp[a]},{c,c}} /. tp[a]->b, vars /. tp[a]->b, TransposePairs -> {{a,b}}]];
  NCTest[(NCExp /. (x_ -> y_) -> x - y), NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = a**a - (- tp[a]**tp[a] - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{tp[a],tp[a]},{c,c}} /. tp[a] -> b, vars /. tp[a] -> b, TransposePairs -> {{a,b}}]];
  NCTest[(NCExp /. (x_ == y_) -> x - y), NCExpExp];

  vars = {{a},{tp[a],c}};
  NCExp = a**a + tp[a]**tp[a] + c**c + d**d;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCMonomialToDigits::InvalidSymbol];

  vars = {{a},{tp[a],{c}}};
  NCExp = a**a + tp[a]**tp[a] + c**c;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::InvalidList];

  vars = {{a},{tp[a],c}};
  NCExp = a**a + tp[a]**tp[a] + c**c +inv[a];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  NCExp = inv[a**a + tp[a]**tp[a] + c**c];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  (* Reverse *)
  vars = {a, tp[a], b};
  NCExp = 1 + a + 2 b ** tp[a] + 3 b ** a + 4 a ** a;
  PolyExp = NCPolyReverseMonomials[NCToNCPoly[NCExp, vars]];
  NCExpExp = NCPolyToNC[PolyExp, vars];
  
  NCTest[NCExpExp, NCExp /. NonCommutativeMultiply[x__] :> NonCommutativeMultiply @@ Reverse[{x}]];
  
  (* Transpose *)
  vars = {a, tp[a], b};
  NCExp = 1 + a + 2 b ** tp[a] + 3 b ** a + 4 a ** a;
  PolyExp = NCPolyTranspose[NCToNCPoly[NCExp, vars]];
  NCExpExp = NCPolyToNC[PolyExp, vars];
  
  NCTest[NCExpExp, tp[NCExp] /. tp[b] -> b];

  (* NCToRule *)
  answer = x ** y^2 -> -1 + x ** y;
  NCTest[NCToRule[x ** y ** y - x ** y + 1, {x, y}], answer];
  answer = x^2 -> x ** y;
  NCTest[NCToRule[x ** x - x ** y, {y, x}], answer];
  answer = {x ** y -> x^2, y ** x -> -x + y};
  NCTest[NCToRule[{x ** x - x ** y, x + y ** x - y}, {x, y}], answer];

  (* NCReduce *)
  vars = {x, y};
  exp1 = {x^2 - y ** x};
  exp2 = {y ** x ** y ** x + x + y ** x - x ** x ** y,  y ** x ** y - x^2 ** y};
  
  answer = {x + x^4 - x^2 ** y + y ** x};
  NCTest[NCReduce[exp2, exp1, vars], answer];
  
  answer = {x + x^2 + x^4 - x^2 ** y};
  NCTest[NCReduce[exp2, exp1, vars, Complete -> True], answer];

  answer = {x - x^2 ** y + y ** x + x^2 ** y ** x, -x^2 ** y + y ** x ** y};
  NCTest[NCReduce[exp2, vars], answer];
  
  answer = {x - x^2 ** y + y ** x + x^2 ** y ** x, -x^2 ** y + y ** x ** y};
  NCTest[NCReduce[exp2, vars, Complete -> True], answer];

  exp2 = {x^2 - y ** x, x ** y - y ** x};
  answer = {x^2 - x ** y, x ** y - y ** x};
  NCTest[NCReduce[exp2, vars], answer];
  NCTest[NCReduceRepeated[exp2, vars], answer];

  answer = {x^2 - x ** y, x^2 - y ** x};
  NCTest[NCReduceRepeated[exp2, vars, Complete -> True], answer];
  
  (* Print["-------------------> " <> ToString[NCTest`Private`NCTestCounter]]; *)

];
