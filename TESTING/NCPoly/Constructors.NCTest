Block[
  {vars,vars1,vars2,
   x,y,z,
   coeff1,mon1,p1,
   coeff2,mon2,p2,
   m0,m1,m2,m3,m4,m5,
   mSorted,zM,mUnsorted,
   isGraded,tmp
   },
  
  (* Test constructors *)

  (* Standard Constructor *)
  Clear[x, y, z];
  vars = {{x, y, z}};

  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetIntegers[p1], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyTermsOfTotalDegree[p1, 2],
         NCPoly[coeff1[[{4,6}]], mon1[[{4,6}]], vars]];
  NCTest[NCPolyTermsOfTotalDegree[p1, 4],
         NCPoly[coeff1[[{5,7}]], mon1[[{5,7}]], vars]];
  NCTest[NCPolyMonomialDegree[p1], {{0, 0, 0}, {1, 0, 0}, {0, 0, 1}, {1, 1, 0}, {1, 0, 1}, {3, 1, 0}, {0, 0, 4}}];
  NCTest[NCPolyPartialDegree[p1], {3,1,4}];
  NCTest[NCPolyNumberOfVariables[p1], 3];
  NCTest[NCPolyNumberOfTerms[p1], 7];

  coeff2 = {1, 0, 2, 3, -1, -2, -3, 0, 1/2};
  mon2 = {{}, {x,x}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {y,z}, {z, z, z, z}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetIntegers[p2], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyMonomialDegree[p2], {{0, 0, 0}, {1, 0, 0}, {0, 0, 1}, {1, 1, 0}, {1, 0, 1}, {3, 1, 0}, {0, 0, 4}}];
  NCTest[NCPolyPartialDegree[p2], {3,1,4}];
  NCTest[NCPolyNumberOfVariables[p2], 3];
  NCTest[NCPolyNumberOfTerms[p2], 7];

  NCTest[NCPolyTermsToList[p2], {NCPoly[{3}, <|{0, 0} -> 1|>], NCPoly[{3}, <|{1, 0} -> 2|>], NCPoly[{3}, <|{1, 2} -> 3|>], NCPoly[{3}, <|{2, 1} -> -1|>], NCPoly[{3}, <|{2, 6} -> -3|>], NCPoly[{3}, <|{4, 9} -> -2|>], NCPoly[{3}, <|{4, 80} -> 1/2|>]}];

  (* zero *)
  NCTest[NCPoly[{},{},{x,y}], 0];

  (* variable not on list *)
  NCTestCheck[NCPoly[{1,2},{{x},{z}},{x,y}],
              $Failed,
	      NCMonomialToDigits::InvalidSymbol];

  (* length of coeffs and monomials dont match *)
  NCTestCheck[NCPoly[{1,2,3},{{x},{y}},{x,y}],
              $Failed,
	      NCPoly::SizeMismatch];

  (* wrong depth *)
  NCTestCheck[NCPoly[{1,2},{{x},{y}},{{x},{{y}}}],
              $Failed,
	      NCPoly::InvalidList];

  (* something other than symbol *)
  NCTestCheck[NCPoly[{1,2},{{x},{y}},{{x,x+y}}],
              $Failed,
	      NCPoly::InvalidList];

  (* something other than symbol *)
  NCTestCheck[NCPoly[{1,2},{{x},{y}},{{x,f[x]}}],
              $Failed,
	      NCPoly::InvalidList];
	      
  (* empty list *)
  NCTestCheck[NCPoly[{1,2},{{x},{y}},{x,y,{}}],
              $Failed,
	      NCPoly::InvalidList];

  (* repeat variable *)
  NCTestCheck[NCPoly[{1,2},{{x},{y}},{x,y,x}],
              $Failed,
	      NCPoly::InvalidList];
	      
  (* Monomial Constructos *)

  m0 = NCPolyConstant[3, 3];
  NCTest[NCPolyGetCoefficients[m0], {3}];
  NCTest[NCPolyGetDigits[m0], {{}}];

  m1 = NCPolyMonomial[{}, 3];
  NCTest[m1, 1];

  m2 = NCPolyMonomial[{0, 1, 2, 1}, 3];
  NCTest[NCPolyLeadingTerm[m2], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m2], {1}];
  NCTest[NCPolyLeadingMonomial[m2], m2];

  m3 = NCPolyMonomial[{4, 16} -> 1, 3];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyLeadingMonomial[m3], m3];

  m4 = NCPolyMonomial[{0,0} -> -1, 3];
  NCTest[NCPolyLeadingTerm[m4], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m4], {-1}];
  NCTest[NCPolyLeadingMonomial[m4], m4];

  (* Some utilities *)

  NCTest[NCPolyLeadingTerm[p1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 2], {4, 9} -> -2];
  NCTest[NCPolyLeadingTerm[p1, 4], {2, 1} -> -1];
  NCTest[NCPolyLeadingTerm[p1, 8], $Failed];

  NCTest[NCPolyLeadingMonomial[p1], NCPoly[{1/2},{{z,z,z,z}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 1], NCPoly[{1/2},{{z,z,z,z}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 2], NCPoly[{-2},{{x,y,x,x}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 4], NCPoly[{-1},{{x,y}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 8], $Failed];

  NCTest[NCPolyMonomialQ[p1], False];
  NCTest[NCPolyMonomialQ[p2], False];
  NCTest[NCPolyMonomialQ[m2], True];
  NCTest[NCPolyMonomialQ[m3], True];
  NCTest[NCPolyMonomialQ[m4], True];

  m5 = NCPolyMonomial[{x,y},vars];
  NCTest[NCPolyCoefficient[p1, m5], -1];
  m5 = NCPolyMonomial[{x,y,x,x},vars];
  NCTest[NCPolyCoefficient[p1, m5], -2];
  m5 = NCPolyMonomial[{z,z},vars];
  NCTest[NCPolyCoefficient[p1, m5], 0];

  (* Print["-------------------> " <> ToString[NCTest`Private`NCTestCounter]]; *)

  (* Sorting *)

  mSorted = { 
    NCPolyMonomial[{0}, 3], 
    NCPolyMonomial[{2}, 3],
    NCPolyMonomial[{0,2}, 3], 
    NCPolyMonomial[{2,1}, 3],
    NCPolyMonomial[{2,1,2}, 3],
    NCPolyMonomial[{2,2,1}, 3]
  };
  zM = Table[0, {Length[mSorted]}];
  mUnsorted = mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  NCTest[mSorted-Sort[mUnsorted], zM];

  mUnsorted = mSorted \
	    + mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  mUnsortedLeading = Map[NCPolyLeadingMonomial, mUnsorted];
  NCTest[Sort[mUnsortedLeading] - Map[NCPolyLeadingMonomial, Sort[mUnsorted]], zM];

  NCTest[mSorted[[1]] > mSorted[[2]], False];
  NCTest[mSorted[[2]] > mSorted[[1]], True];

  (* Fancy Display *)

  Print["* Check the following expressions for proper formating.\n> BEGIN"];
  
  Print[NCPolyDisplay[p1, vars]];
  Print[NCPolyDisplay[p2, vars]];
  Print[NCPolyDisplay[m2, vars]];
  Print[NCPolyDisplay[m3, vars]];
  Print[NCPolyDisplay[m4, vars]];

  (* Fancy Display w/ default symbols *)

  Print[NCPolyDisplay[p1]];
  Print[NCPolyDisplay[p2]];

  Print["< END"];

  (* Test graded constructors *)
  
  isGraded = (NCPolyOrderType[NCPolyMonomial[{1}, 1]] === NCPoly`NCPolyDegLexGraded);

  If[ !isGraded,
      Print["> Class does not support graded ordering. Skipping tests..."];
      Return[]
  ];

  (* Graded Constructor *)

  Clear[x, y, z];
  vars = {{x, y}, {z}};
  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, -1, -2, 3, -3, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyTermsOfTotalDegree[p1, 2],
         NCPoly[coeff1[[{4,6}]], mon1[[{4,6}]], vars]];
  NCTest[NCPolyTermsOfTotalDegree[p1, 4],
         NCPoly[coeff1[[{5,7}]], mon1[[{5,7}]], vars]];
  NCTest[NCPolyMonomialDegree[p1], {{0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {3, 1, 0}, {0, 0, 1}, {1, 0, 1}, {0, 0, 4}}];
  NCTest[NCPolyPartialDegree[p1], {3,1,4}];
  NCTest[NCPolyNumberOfVariables[p1], 3];
  NCTest[NCPolyNumberOfTerms[p1], 7];

  coeff2 = {1,     0,   2,   3,    -1,        -2,   -3,     0,          1/2};
  mon2 = { {}, {x,x}, {x}, {z}, {x,y}, {x,y,x,x}, {z,x}, {y,z}, {z, z, z, z}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, -1, -2, 3, -3, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyMonomialDegree[p2], {{0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {3, 1, 0}, {0, 0, 1}, {1, 0, 1}, {0, 0, 4}}];
  NCTest[NCPolyPartialDegree[p2], {3,1,4}];
  NCTest[NCPolyNumberOfVariables[p2], 3];
  NCTest[NCPolyNumberOfTerms[p2], 7];

  (* Standard Constructor *)

  coeff3 = {1, 2, 3, -1, -2, -3, 1/2};
  mon3 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p3 = NCPoly[coeff3, mon3, Flatten[vars]];

  (* Lex variation *)
  
  vars = {{x, y}, {z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, -1, -2, 3, -3, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];

  (* Monomial Constructos *)

  m0 = NCPolyConstant[3, {2,1}];
  NCTest[NCPolyGetCoefficients[m0], {3}];
  NCTest[NCPolyGetDigits[m0], {{}}];

  m1 = NCPolyMonomial[{}, 3];
  NCTest[m1, 1];

  m1 = NCPolyMonomial[{}, {3}];
  NCTest[m1, 1];

  m1 = NCPolyMonomial[{}, {2,1}];
  NCTest[m1, 1];

  m2 = NCPolyMonomial[{0, 1, 2, 1}, {2, 1}];
  NCTest[NCPolyLeadingTerm[m2], {4, 16} -> 1];
  NCTest[NCPolyGetDigits[m2], {{0,1,2,1}}];
  NCTest[NCPolyGetCoefficients[m2], {1}];

  m2 = NCPolyMonomial[{a, b, c, b}, {{a, b}, {c}}];
  NCTest[NCPolyLeadingTerm[m2], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m2], {1}];
  NCTest[NCPolyGetDigits[m2], {{0,1,2,1}}];

  m3 = NCPolyMonomial[{4, 16} -> 1, 3];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyGetDigits[m3], {{0,1,2,1}}];

  m4 = NCPolyMonomial[{4, 16} -> 1, 3];
  NCTest[NCPolyLeadingTerm[m4], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m4], {1}];
  NCTest[NCPolyGetDigits[m4], {{0,1,2,1}}];

  m3 = NCPolyMonomial[{4, 16} -> 1, {3}];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyGetDigits[m3], {{0,1,2,1}}];

  m4 = NCPolyMonomial[{4, 16} -> 1, {3}];
  NCTest[NCPolyLeadingTerm[m4], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m4], {1}];
  NCTest[NCPolyGetDigits[m4], {{0,1,2,1}}];

  m3 = NCPolyMonomial[{1, 3, 16} -> 1, {2,1}];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyGetDigits[m3], {{0,1,2,1}}];

  m4 = NCPolyMonomial[{4, 16} -> 1, {2,1}];
  NCTest[NCPolyLeadingTerm[m4], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m4], {1}];
  NCTest[NCPolyGetDigits[m4], {{0,1,2,1}}];

  m5 = NCPolyMonomial[{0, 0} -> -1, 3];
  NCTest[NCPolyLeadingTerm[m5], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m5], {-1}];
  NCTest[NCPolyGetDigits[m5], {{}}];

  m5 = NCPolyMonomial[{0, 0} -> -1, {3}];
  NCTest[NCPolyLeadingTerm[m5], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m5], {-1}];
  NCTest[NCPolyGetDigits[m5], {{}}];

  m5 = NCPolyMonomial[{0, 0} -> -1, {2,1}];
  NCTest[NCPolyLeadingTerm[m5], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m5], {-1}];
  NCTest[NCPolyGetDigits[m5], {{}}];

  (* Some utilities *)

  NCTest[NCPolyLeadingTerm[p1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 2], {2, 6} -> -3];
  NCTest[NCPolyLeadingTerm[p1, 4], {4, 9} -> -2];
  NCTest[NCPolyLeadingTerm[p1, 8], $Failed];

  NCTest[NCPolyLeadingMonomial[p1], NCPoly[{1/2},{{z,z,z,z}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 1], NCPoly[{1/2},{{z,z,z,z}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 2], NCPoly[{-3},{{z,x}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 4], NCPoly[{-2},{{x,y,x,x}}, vars]];
  NCTest[NCPolyLeadingMonomial[p1, 8], $Failed];
  
  NCTest[NCPolyMonomialQ[p1], False];
  NCTest[NCPolyMonomialQ[p2], False];
  NCTest[NCPolyMonomialQ[m2], True];
  NCTest[NCPolyMonomialQ[m3], True];
  NCTest[NCPolyMonomialQ[m4], True];
  NCTest[NCPolyMonomialQ[m5], True];

  (* Sorting *)

  mSorted = { 
    NCPolyMonomial[{0}, 3], 
    NCPolyMonomial[{2}, 3],
    NCPolyMonomial[{0,2}, 3], 
    NCPolyMonomial[{2,1}, 3],
    NCPolyMonomial[{0,0,1}, 3], 
    NCPolyMonomial[{2,1,2}, 3],
    NCPolyMonomial[{2,2,1}, 3]
  };
  mUnsorted = mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  NCTest[mSorted === Sort[mUnsorted], True];

  NCTest[mSorted[[1]] > mSorted[[2]], False];
  NCTest[mSorted[[2]] > mSorted[[1]], True];

  mSorted = { 
    NCPolyMonomial[{0}, {2,1}], 
    NCPolyMonomial[{0,0,1}, {2,1}], 
    NCPolyMonomial[{2}, {2,1}],
    NCPolyMonomial[{0,2}, {2,1}], 
    NCPolyMonomial[{2,1}, {2,1}],
    NCPolyMonomial[{2,1,2}, {2,1}],
    NCPolyMonomial[{2,2,1}, {2,1}]
  };
  mUnsorted = mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  NCTest[mSorted === Sort[mUnsorted], True];

  NCTest[mSorted[[1]] > mSorted[[2]], False];
  NCTest[mSorted[[2]] > mSorted[[1]], True];

  (* Fancy Display *)

  Print["* Check the following expressions for proper formating.\n> BEGIN"];

  Print[NCPolyDisplay[p1, vars]];
  Print[NCPolyDisplay[p2, vars]];
  Print[NCPolyDisplay[m2, vars]];
  Print[NCPolyDisplay[m3, vars]];
  Print[NCPolyDisplay[m4, vars]];
  Print[NCPolyDisplay[m5, vars]];

  (* Fancy Display w/ default symbols *)

  Print[NCPolyDisplay[p1]];
  Print[NCPolyDisplay[p2]];

  Print["< END"];

  (* Subscripted variables *)

  Clear[x, y, z];
  vars = {{Subscript[x,1], y, z}};

  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {Subscript[x,1]}, {z}, {Subscript[x,1], y}, {Subscript[x,1], y, Subscript[x,1], Subscript[x,1]}, {z, Subscript[x,1]}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetIntegers[p1], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyNumberOfVariables[p1], 3];
  NCTest[NCPolyNumberOfTerms[p1], 7];

  coeff2 = {1, 0, 2, 3, -1, -2, -3, 0, 1/2};
  mon2 = {{}, {Subscript[x,1],Subscript[x,1]}, {Subscript[x,1]}, {z}, {Subscript[x,1], y}, {Subscript[x,1], y, Subscript[x,1], Subscript[x,1]}, {z, Subscript[x,1]}, {y,z}, {z, z, z, z}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetIntegers[p2], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyNumberOfVariables[p2], 3];
  NCTest[NCPolyNumberOfTerms[p2], 7];

  (* Same letter *)

  Clear[x];
  vars = {{Subscript[x,1], x, Subscript[x,2]}};

  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {Subscript[x,1]}, {Subscript[x,2]}, {Subscript[x,1], x}, {Subscript[x,1], x, Subscript[x,1], Subscript[x,1]}, {Subscript[x,2], Subscript[x,1]}, {Subscript[x,2], Subscript[x,2], Subscript[x,2], Subscript[x,2]}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetIntegers[p1], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyNumberOfVariables[p1], 3];
  NCTest[NCPolyNumberOfTerms[p1], 7];

  coeff2 = {1, 0, 2, 3, -1, -2, -3, 0, 1/2};
  mon2 = {{}, {Subscript[x,1],Subscript[x,1]}, {Subscript[x,1]}, {Subscript[x,2]}, {Subscript[x,1], x}, {Subscript[x,1], x, Subscript[x,1], Subscript[x,1]}, {Subscript[x,2], Subscript[x,1]}, {x,Subscript[x,2]}, {Subscript[x,2], Subscript[x,2], Subscript[x,2], Subscript[x,2]}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetIntegers[p2], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyNumberOfVariables[p2], 3];
  NCTest[NCPolyNumberOfTerms[p2], 7];

  (* Functional coefficients *)

  Clear[x, y, z];
  vars = {{x, y, z}};

  coeff1 = {1, 2, A[1,3], -1, -2, -A[3,1], 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, A[1,3], -1, -A[3,1], -2, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetIntegers[p1], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyNumberOfVariables[p1], 3];
  NCTest[NCPolyNumberOfTerms[p1], 7];

  coeff2 = {1, 0, 2, A[1,3], -1, -2, -A[3,1], 0, 1/2};
  mon2 = {{}, {x,x}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {y,z}, {z, z, z, z}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, A[1,3], -1, -A[3,1], -2, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetIntegers[p2], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyNumberOfVariables[p2], 3];
  NCTest[NCPolyNumberOfTerms[p2], 7];

  (* Convert *)
  vars1 = {{x, y, z}};
  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars1];

  vars2 = {{x}, {y, z}};
  p2 = NCPoly[coeff1, mon1, vars2];

  NCTest[NCPolyConvert[p1, vars2], p2];
  NCTest[NCPolyConvert[p2, vars1], p1];

  (* Transpose *)
  
  vars = {{x, y, z}};
  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars, TransposePairs -> {{x,y}}];
  
  NCTest[NCPolyGetCoefficients[p1], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyGetIntegers[p1], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];
  NCTest[NCPolyGetOptions[p1], \
       {TransposePairs -> {{0,1}}}];

  NCTest[NCPolyTermsToList[p1], {NCPoly[{3}, <|{0, 0} -> 1|>, TransposePairs -> {{0, 1}}], NCPoly[{3}, <|{1, 0} -> 2|>, TransposePairs -> {{0, 1}}], NCPoly[{3}, <|{1, 2} -> 3|>, TransposePairs -> {{0, 1}}], NCPoly[{3}, <|{2, 1} -> -1|>, TransposePairs -> {{0, 1}}], NCPoly[{3}, <|{2, 6} -> -3|>, TransposePairs -> {{0, 1}}], NCPoly[{3}, <|{4, 9} -> -2|>, TransposePairs -> {{0, 1}}], NCPoly[{3}, <|{4, 80} -> 1/2|>, TransposePairs -> {{0, 1}}]}];

  mon2 = Map[Reverse, mon1];
  p2 = NCPoly[coeff1, mon2, vars, TransposePairs -> {{x,y}}];
  NCTest[NCPolyReverseMonomials[p1], p2];

  mon2 = Map[Reverse, mon1] /. {x->y,y->x};
  p2 = NCPoly[coeff1, mon2, vars, TransposePairs -> {{x,y}}];
  NCTest[NCPolyTranspose[p1], p2];

  (* Adjoint *)

  NCTest[NCPolyAdjoint[p1], p2];

  coeff1 = {1, 2, 3+I, -1, -2+I, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars, TransposePairs -> {{x,y}}];

  mon2 = Map[Reverse, mon1] /. {x->y,y->x};
  p2 = NCPoly[coeff1, mon2, vars, TransposePairs -> {{x,y}}];
  NCTest[NCPolyTranspose[p1], p2];

  mon2 = Map[Reverse, mon1] /. {x->y,y->x};
  p2 = NCPoly[Map[Conjugate, coeff1], mon2, vars, TransposePairs -> {{x,y}}];
  NCTest[NCPolyAdjoint[p1], p2];

  coeff1 = {1, 2, 3+I, -1, -2+I, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars, SelfAdjointPairs -> {{x,y}}];

  (* self adjoints do not transpose *)
  mon2 = Map[Reverse, mon1];
  p2 = NCPoly[coeff1, mon2, vars, SelfAdjointPairs -> {{x,y}}];
  NCTest[NCPolyTranspose[p1], p2];

  mon2 = Map[Reverse, mon1] /. {x->y,y->x};
  p2 = NCPoly[Map[Conjugate, coeff1], mon2, vars, SelfAdjointPairs -> {{x,y}}];
  NCTest[NCPolyAdjoint[p1], p2];

  NCTest[NCPolyTermsToList[p2], {NCPoly[{3}, <|{0, 0} -> 1|>, SelfAdjointPairs -> {{0, 1}}], NCPoly[{3}, <|{1, 1} -> 2|>, SelfAdjointPairs -> {{0, 1}}], NCPoly[{3}, <|{1, 2} -> 3 - I|>, SelfAdjointPairs -> {{0, 1}}], NCPoly[{3}, <|{2, 1} -> -1|>, SelfAdjointPairs -> {{0, 1}}], NCPoly[{3}, <|{2, 5} -> -3|>, SelfAdjointPairs -> {{0, 1}}], NCPoly[{3}, <|{4, 37} -> -2 - I|>, SelfAdjointPairs -> {{0, 1}}], NCPoly[{3}, <|{4, 80} -> 1/2|>, SelfAdjointPairs -> {{0, 1}}]}];

  (* QuadraticTerms *)
  
  vars = {{x, y, z}};
  coeff1 = {1, 1, 4, 3, 2, -1};
  digits1 = {{}, {x}, {y, x}, {z, x}, {z, y}, {x, z, z, y}};
  p1 = NCPoly[coeff1, digits1, vars, TransposePairs -> {{x, y}}];
  p2 = NCPolyQuadraticTerms[p1];

  NCTest[NCPolyGetCoefficients[p2], {1, 4, -1}];
  NCTest[NCPolyGetDigits[p2], {{}, {1, 0}, {0, 2, 2, 1}}];

  (* QuadraticChipset *)

  Quiet[
    NCTest[
      Check[
        p2 = NCPolyQuadraticChipset[p1];
        False
       ,
        True
       ,
        NCPoly::NotSelfAdjoint
      ]
      ,
      True
    ]
    ,  
     NCPoly::NotSelfAdjoint
  ];
  
  NCTest[NCPolyGetCoefficients[p2], {1, 1, 1}];
  NCTest[NCPolyGetDigits[p2], {{}, {1}, {0, 2}}];

  (* QuadraticTerms *)
  
  vars = {{x, y, z}};
  coeff1 = {1, 1, 4 + I, 3, I - 2, -1};
  digits1 = {{}, {x}, {y, x}, {z, x}, {z, y}, {x, z, z, y}};
  p1 = NCPoly[coeff1, digits1, vars, SelfAdjointPairs -> {{x, y}}];
  p2 = NCPolyQuadraticTerms[p1];

  NCTest[NCPolyGetCoefficients[p2], {1, 4 + I, -1}];
  NCTest[NCPolyGetDigits[p2], {{}, {1, 0}, {0, 2, 2, 1}}];

  (* QuadraticChipset *)
  
  Quiet[
    NCTest[
      Check[
        p2 = NCPolyQuadraticChipset[p1];
        False
       ,
        True
       ,
        NCPoly::NotSelfAdjoint
      ]
      ,
      True
    ]
    ,  
     NCPoly::NotSelfAdjoint
  ];
  
  NCTest[NCPolyGetCoefficients[p2], {1, 1, 1}];
  NCTest[NCPolyGetDigits[p2], {{}, {1}, {0, 2}}];

  (* QuadraticTerms *)
  
  vars = {{x, y}};
  coeff1 = {1, 2, 3};
  digits1 = {{}, {x}, {y}};
  p1 = NCPoly[coeff1, digits1, vars];
  p2 = NCPolyQuadraticTerms[p1];

  NCTest[NCPolyGetCoefficients[p2], {1}];
  NCTest[NCPolyGetDigits[p2], {{}}];

  (* QuadraticChipset *)
  
  p2 = NCPolyQuadraticChipset[p1];
  
  NCTest[NCPolyGetCoefficients[p2], {1}];
  NCTest[NCPolyGetDigits[p2], {{}}];

  (* NCPolyPossibleZeroQ *)
  NCTest[NCPolyPossibleZeroQ[1], False];
  NCTest[NCPolyPossibleZeroQ[0], True];
  NCTest[NCPolyPossibleZeroQ[0.], True];
  NCTest[NCPolyPossibleZeroQ[1 + Exp[2/3 Pi I] + Exp[-2/3 Pi I]], True];

  (* More NCPolyMonomial tests *)
  vars = {x,y,z};
  m0 = NCPolyMonomial[{x}, vars];
  m1 = NCPolyMonomial[{0}, {1,1,1}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{y}, vars];
  m1 = NCPolyMonomial[{1}, {1,1,1}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{z}, vars];
  m1 = NCPolyMonomial[{2}, {1,1,1}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{x, x}, vars];
  m1 = NCPolyMonomial[{0, 0}, {1,1,1}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{x, z}, vars];
  m1 = NCPolyMonomial[{0, 2}, {1,1,1}];
  NCTest[m0, m1];

  vars = {{x,y,z}};
  m0 = NCPolyMonomial[{x}, vars];
  m1 = NCPolyMonomial[{0}, {3}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{y}, vars];
  m1 = NCPolyMonomial[{1}, {3}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{z}, vars];
  m1 = NCPolyMonomial[{2}, {3}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{x, x}, vars];
  m1 = NCPolyMonomial[{0, 0}, {3}];
  NCTest[m0, m1];

  m0 = NCPolyMonomial[{x, z}, vars];
  m1 = NCPolyMonomial[{0, 2}, {3}];
  NCTest[m0, m1];

];