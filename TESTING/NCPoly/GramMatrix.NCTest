<< NCPoly`

Block[
  {vars,poly,mat,p,d,pl,pr,
   answer,
   x,y,z},

  vars = {{x, y}};

  poly = NCPoly[{1, -1}, {{x, x}, {y, y}}, vars];

  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0,0,0},{0,1,0},{0,0,-1}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, {NCPoly[{1}, {{x}}, vars], NCPoly[{-1}, {{y}}, vars]}];
  NCTest[pr, {NCPoly[{1}, {{x}}, vars], NCPoly[{-1}, {{y}}, vars]}];

  poly = NCPoly[{2, 1, -1}, {{}, {x, x}, {y, y}}, vars];

  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{2,0,0},{0,1,0},{0,0,-1}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, {NCPoly[{2}, {{}}, vars], NCPoly[{1}, {{x}}, vars], NCPoly[{-1}, {{y}}, vars]}];
  NCTest[pr, {NCPoly[{2}, {{}}, vars], NCPoly[{1}, {{x}}, vars], NCPoly[{-1}, {{y}}, vars]}];

  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];

  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0,0,0},{0,0,1},{0,-1,0}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pr, {NCPoly[{1}, {{y}}, vars], NCPoly[{-1}, {{x}}, vars]}];
  NCTest[pl, {NCPoly[{-1}, {{y}}, vars], NCPoly[{1}, {{x}}, vars]}];
  
  poly = NCPoly[{1, -1}, {{x, x}, {x, y, y, x}}, vars];

  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0, 0}, {0, 1, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, -1}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, {NCPoly[{1}, {{x}}, vars], NCPoly[{-1}, {{x, y}}, vars]}];
  NCTest[pr, {NCPoly[{1}, {{x}}, vars], NCPoly[{-1}, {{y, x}}, vars]}];
  
  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x, x, y}}, vars];
  
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0}, {2, 0, 1, 0}, {0, -1, 0, 0}, {0, 0, 1, 0}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, {NCPoly[{2}, {{x}}, vars], NCPoly[{-1}, {{y}}, vars], NCPoly[{1, 1}, {{x}, {x, x}}, vars]}];
  NCTest[pr, {NCPoly[{2, 1}, {{}, {y}}, vars], NCPoly[{-1}, {{x}}, vars], NCPoly[{1}, {{y}}, vars]}];

  {pl,pr} = NCPolyFromGramMatrixFactors[Transpose[mat], mat, vars];
  NCTest[pl, {NCPoly[{2, 1}, {{}, {y}}, vars], NCPoly[{-1}, {{x}}, vars], NCPoly[{1}, {{y}}, vars]}];
  NCTest[pr, {NCPoly[{2, 1}, {{}, {y}}, vars], NCPoly[{-1}, {{x}}, vars], NCPoly[{1}, {{y}}, vars]}];
  
  {pl,pr} = NCPolyFromGramMatrixFactors[Transpose[mat], Transpose[mat], vars];
  NCTest[pl, {NCPoly[{2, 1}, {{}, {y}}, vars], NCPoly[{-1}, {{x}}, vars], NCPoly[{1}, {{y}}, vars]}];
  NCTest[pr, {NCPoly[{2}, {{x}}, vars], NCPoly[{-1}, {{y}}, vars], NCPoly[{1, 1}, {{x}, {x, x}}, vars]}];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,x,y,x}}, vars];
  
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0, 0}, {2, 0, 1, 0, 0}, {0, -1, 0, 0, 0}, {0, 0, 0, 0, 1}, {0, 0, 0, 0, 0}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,y,y,x}}, vars];
  
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0, 0}, {2, 0, 1, 0, 0}, {0, -1, 0, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 0, 1}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,x,x}}, vars];
  
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0}, {2, 0, 1, 0}, {0, -1, 0, 0}, {0, 1, 0, 0}}];
  NCTest[mat, answer];

  p = NCPolyFromGramMatrix[mat, vars];
  NCTest[p, poly];

  vars = {x, y, z};
  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0}, {0, 0, 1},{0, -1, 0}}];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x, y, z}};
  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];
  mat = NCPolyGramMatrix[poly];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x, y, z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z}}, vars];
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0}, {0, 0, 1, 0}, {0, -1, 0, 0}, {0, 0, 0, 3}}];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x}, {y}, {z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z}}, vars];
  mat = NCPolyGramMatrix[poly];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x, y, z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0}}];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x}, {y, z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyGramMatrix[poly];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x, y}, {z}};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyGramMatrix[poly];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {x, y, z};
  poly = NCPoly[{1, -1, 3}, {{x, y}, {y, x}, {z, z, z}}, vars];
  mat = NCPolyGramMatrix[poly];
  NCTest[mat, answer];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {x,y,z};
  poly = NCPoly[{1, 2, 3, -1, -2, -3, 1/2},
                {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}},
		vars];
  mat = NCPolyGramMatrix[poly];
  answer = SparseArray[
    {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/2}}
   ];
  NCTest[Norm[mat - answer] < 1^-6];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x},{y,z}};
  poly = NCPoly[{1, 2, 3, -1, -2, -3, 1/2},
                {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}},
		vars];
  mat = NCPolyGramMatrix[poly];
  NCTest[Norm[mat - answer] < 1^-6];
  NCTest[NCPolyFromGramMatrix[mat, vars], poly];

  vars = {{x,y}};
  mat = IdentityMatrix[3];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[1, {2}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[1, {2}]]]];

  vars = {x,y};
  mat = IdentityMatrix[3];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1}]&, NCPolyTermsToList[NCPolyVeronese[1, {2}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[1, {2}]]]]];

  vars = {{x,y,z}};
  mat = IdentityMatrix[4];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[1, {3}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[1, {3}]]]];

  vars = {x,y,z};
  mat = IdentityMatrix[4];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1,1}]&, NCPolyTermsToList[NCPolyVeronese[1, {3}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[1, {3}]]]]];

  vars = {{x,y}};
  mat = IdentityMatrix[7];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[2, {2}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[2, {2}]]]];

  vars = {x,y};
  mat = IdentityMatrix[7];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1}]&, NCPolyTermsToList[NCPolyVeronese[2, {2}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[2, {2}]]]]];

  vars = {{x,y,z}};
  mat = IdentityMatrix[13];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[2, {3}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[2, {3}]]]];

  vars = {x,y,z};
  mat = IdentityMatrix[13];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1,1}]&, NCPolyTermsToList[NCPolyVeronese[2, {3}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[2, {3}]]]]];

  vars = {{x,y}};
  mat = IdentityMatrix[15];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[3, {2}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[3, {2}]]]];

  vars = {x,y};
  mat = IdentityMatrix[15];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1}]&, NCPolyTermsToList[NCPolyVeronese[3, {2}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[3, {2}]]]]];

  vars = {{x,y,z}};
  mat = IdentityMatrix[40];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[3, {3}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[3, {3}]]]];

  vars = {x,y,z};
  mat = IdentityMatrix[40];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1,1}]&, NCPolyTermsToList[NCPolyVeronese[3, {3}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[3, {3}]]]]];

  vars = {{x,y}};
  mat = IdentityMatrix[31];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[4, {2}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[4, {2}]]]];

  vars = {x,y};
  mat = IdentityMatrix[31];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1}]&, NCPolyTermsToList[NCPolyVeronese[4, {2}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[4, {2}]]]]];

  vars = {{x,y,z}};
  mat = IdentityMatrix[121];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, NCPolyTermsToList[NCPolyVeronese[4, {3}]]];
  NCTest[pr, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[4, {3}]]]];

  vars = {x,y,z};
  mat = IdentityMatrix[121];
  {pl,pr} = NCPolyFromGramMatrixFactors[mat, mat, vars];
  NCTest[pl, Map[NCPolyConvert[#, {1,1,1}]&, NCPolyTermsToList[NCPolyVeronese[4, {3}]]]];
  NCTest[pr, Map[NCPolyConvert[#, {1,1,1}]&, Map[NCPolyAdjoint,NCPolyTermsToList[NCPolyVeronese[4, {3}]]]]];

];
