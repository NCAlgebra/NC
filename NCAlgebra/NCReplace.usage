(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2023-02-18 17:53:38.297911                       *
 *************************************************************************)


(* NCReplace *)
NCReplace::usage = "\
NCReplace[expr,rules] applies a rule or list of rules rules in an attempt to transform the entire nc expression expr.

NCReplace[expr,rules,levelspec] applies rules to parts of expr specified by levelspec.

See also: NCReplaceAll, NCReplaceList, NCReplaceRepeated.";

(* NCReplaceAll *)
NCReplaceAll::usage = "\
NCReplaceAll[expr,rules] applies a rule or list of rules rules in an attempt to transform each part of the nc expression expr.

See also: NCReplace, NCReplaceList, NCReplaceRepeated.";

(* NCReplaceList *)
NCReplaceList::usage = "\
NCReplace[expr,rules] attempts to transform the entire nc expression expr by applying a rule or list of rules rules in all possible ways, and returns a list of the results obtained.

ReplaceList[expr,rules,n] gives a list of at most n results.

See also: NCReplace, NCReplaceAll, NCReplaceRepeated.";

(* NCReplaceRepeated *)
NCReplaceRepeated::usage = "\
NCReplaceRepeated[expr,rules] repeatedly performs replacements using rule or list of rules rules until expr no longer changes.

See also: NCReplace, NCReplaceAll, NCReplaceList.";

(* NCR *)
NCR::usage = "\
NCR is an alias for NCReplace.

See also: NCReplace.";

(* NCRA *)
NCRA::usage = "\
NCRA is an alias for NCReplaceAll.

See also: NCReplaceAll.";

(* NCRR *)
NCRR::usage = "\
NCRR is an alias for NCReplaceRepeated.

See also: NCReplaceRepeated.";

(* NCRL *)
NCRL::usage = "\
NCRL is an alias for NCReplaceList.

See also: NCReplaceList.";

(* NCMakeRuleSymmetric *)
NCMakeRuleSymmetric::usage = "\
NCMakeRuleSymmetric[rules] add rules to transform the transpose of the left-hand side of rules into the transpose of the right-hand side of rules.

See also: NCMakeRuleSelfAdjoint, NCReplace, NCReplaceAll, NCReplaceList, NCReplaceRepeated.";

(* NCMakeRuleSelfAdjoint *)
NCMakeRuleSelfAdjoint::usage = "\
NCMakeRuleSelfAdjoint[rules] add rules to transform the adjoint of the left-hand side of rules into the adjoint of the right-hand side of rules.

See also: NCMakeRuleSymmetric, NCReplace, NCReplaceAll, NCReplaceList, NCReplaceRepeated.";

(* NCReplaceSymmetric *)
NCReplaceSymmetric::usage = "\
NCReplaceSymmetric[expr, rules] applies NCMakeRuleSymmetric to rules before calling NCReplace.

See also: NCReplace, NCMakeRuleSymmetric.";

(* NCReplaceAllSymmetric *)
NCReplaceAllSymmetric::usage = "\
NCReplaceAllSymmetric[expr, rules] applies NCMakeRuleSymmetric to rules before calling NCReplaceAll.

See also: NCReplaceAll, NCMakeRuleSymmetric.";

(* NCReplaceRepeatedSymmetric *)
NCReplaceRepeatedSymmetric::usage = "\
NCReplaceRepeatedSymmetric[expr, rules] applies NCMakeRuleSymmetric to rules before calling NCReplaceRepeated.

See also: NCReplaceRepeated, NCMakeRuleSymmetric.";

(* NCReplaceListSymmetric *)
NCReplaceListSymmetric::usage = "\
NCReplaceListSymmetric[expr, rules] applies NCMakeRuleSymmetric to rules before calling NCReplaceList.

See also: NCReplaceList, NCMakeRuleSymmetric.";

(* NCRSym *)
NCRSym::usage = "\
NCRSym is an alias for NCReplaceSymmetric.

See also: NCReplaceSymmetric.";

(* NCRASym *)
NCRASym::usage = "\
NCRASym is an alias for NCReplaceAllSymmetric.

See also: NCReplaceAllSymmetric.";

(* NCRRSym *)
NCRRSym::usage = "\
NCRRSym is an alias for NCReplaceRepeatedSymmetric.

See also: NCReplaceRepeatedSymmetric.";

(* NCRLSym *)
NCRLSym::usage = "\
NCRLSym is an alias for NCReplaceListSymmetric.

See also: NCReplaceListSymmetric.";

(* NCReplaceSelfAdjoint *)
NCReplaceSelfAdjoint::usage = "\
NCReplaceSelfAdjoint[expr, rules] applies NCMakeRuleSelfAdjoint to rules before calling NCReplace.

See also: NCReplace, NCMakeRuleSelfAdjoint.";

(* NCReplaceAllSelfAdjoint *)
NCReplaceAllSelfAdjoint::usage = "\
NCReplaceAllSelfAdjoint[expr, rules] applies NCMakeRuleSelfAdjoint to rules before calling NCReplaceAll.

See also: NCReplaceAll, NCMakeRuleSelfAdjoint.";

(* NCReplaceRepeatedSelfAdjoint *)
NCReplaceRepeatedSelfAdjoint::usage = "\
NCReplaceRepeatedSelfAdjoint[expr, rules] applies NCMakeRuleSelfAdjoint to rules before calling NCReplaceRepeated.

See also: NCReplaceRepeated, NCMakeRuleSelfAdjoint.";

(* NCReplaceListSelfAdjoint *)
NCReplaceListSelfAdjoint::usage = "\
NCReplaceListSelfAdjoint[expr, rules] applies NCMakeRuleSelfAdjoint to rules before calling NCReplaceList.

See also: NCReplaceList, NCMakeRuleSelfAdjoint.";

(* NCRSA *)
NCRSA::usage = "\
NCRSA is an alias for NCReplaceSymmetric.

See also: NCReplaceSymmetric.";

(* NCRASA *)
NCRASA::usage = "\
NCRASA is an alias for NCReplaceAllSymmetric.

See also: NCReplaceAllSymmetric.";

(* NCRRSA *)
NCRRSA::usage = "\
NCRRSA is an alias for NCReplaceRepeatedSymmetric.

See also: NCReplaceRepeatedSymmetric.";

(* NCRLSA *)
NCRLSA::usage = "\
NCRLSA is an alias for NCReplaceListSymmetric.

See also: NCReplaceListSymmetric.";

(* NCMatrixExpand *)
NCMatrixExpand::usage = "\
NCMatrixExpand[expr] expands inv and ** of matrices appearing in nc expression expr. It effectively substitutes inv for NCInverse and ** by NCDot.

See also: NCInverse, NCDot.";

(* NCMatrixReplaceAll *)
NCMatrixReplaceAll::usage = "\
NCMatrixReplaceAll[expr,rules] applies a rule or list of rules rules in an attempt to transform each part of the nc expression expr.

NCMatrixReplaceAll works as NCReplaceAll but takes extra steps to make sure substitutions work with matrices.

See also: NCReplaceAll, NCMatrixReplaceRepeated.";

(* NCMatrixReplaceRepeated *)
NCMatrixReplaceRepeated::usage = "\
NCMatrixReplaceRepeated[expr,rules] repeatedly performs replacements using rule or list of rules rules until expr no longer changes.

NCMatrixReplaceRepeated works as NCReplaceRepeated but takes extra steps to make sure substitutions work with matrices.

See also: NCReplaceRepeated, NCMatrixReplaceAll.";

(* NCReplacePowerRule *)
NCReplacePowerRule::usage = "\
NCReplacePowerRule[rule] transforms rules that consist of a noncommutative monomial so that symbols appearing on the left and on right of the monomial also match positive powers of that symbol.

See also: NCReplace, NCReplaceAll, NCReplaceList, NCReplaceRepeated.";
